<?php
/**
 * CompanyApi
 * PHP version 5
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Immodvisor
 *
 * ## Terms of use    \\n\\nThe terms of use gather all the rules to follow to use the Immodvisor API. ## Technical side Your API key and the grains of salt of the checksums must remain secret, they represent your private parameters. It is strictly forbidden to communicate them to third parties. For security reasons, if one of these rules is not respected, we would be forced to deactivate your API key. ## Advices It is strongly recommended to use cache if you are using the API to display your rating and reviews on your site. This will ensure that the display of your page does not depend on the API responses and therefore does not affect its display time. ## Display the notices on your media ### On your website: You must clearly display the source of the reviews, namely Immodvisor. Thus, the Immodvisor logo or the seal of trust must clearly appear on the page displaying the reviews, with a link in the href, scanned by search engines, and pointing to the company file of the Immodvisor site. This point is essential for search engines to make the link between the 2 pages, and avoid duplication of content. The review pages of your site must be validated by our marketing department before going into production. You must also display a textual mention indicating that the reviews come from the Immodvisor site.   Our marketing department can be reached at 09 81 10 75 88 or by email at assistance@Immodvisor.com ### On other communication supports: You must always display the Immodvisor logo and indicate that the reviews are from the Immodvisor solution.  ## Display Rich Snippets in google results on your url Rich Snippets give the promise to the internet user to be able to read reviews. Any page displaying Rich Snippets in google must display the stars, as well as a link to the company's Immodvisor page. All these elements must match. For example, you can display the Rich Snippets of the company on the home page, and the Rich Snippets of each agency on your respective agency pages. Strong recommendation: a given Rich Snippet should only be placed on one and only one web page. Good to know: Rich Snippets tell Google's search engine a rating related to a web page. Google decides whether or not displaying the note in its search results is relevant to your web page. Immodvisor cannot influence Google's willingness to display or not the indicators sent by your site. ## Checksum For each call to the API, a checksum must be sent. This checksum is calculated as follows:   Concatenation of the following values, all formatted in SHA1 :  * apikey * values of the sent fields, formatted in JSON if it is an array or an object * checksum_salt_in  ### PHP code example ```PHP private function calcChecksumIn($api_key, $checksum_salt_in, $datas = array())     {         $checksum = \"\";         $checksum .= $api_key;         foreach ($datas as $k => $v) {             if (is_array($v) || is_object($v)) {                 $v = json_encode($v, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);             } elseif ($v === true) {                 $v = 1;             } elseif ($v === false) {                 $v = 0;             }             $checksum .= $v;         }         $checksum .= $checksum_salt_in;         return sha1($checksum);     }   ```
 *
 * OpenAPI spec version: 1.11.0
 * Contact: assistance@Immodvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Immodvisor\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Immodvisor\ApiException;
use Immodvisor\Configuration;
use Immodvisor\HeaderSelector;
use Immodvisor\ObjectSerializer;

/**
 * CompanyApi Class Doc Comment
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companyAddMediaPost
     *
     * add media to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  string $category category (optional)
     * @param  string $type type (optional)
     * @param  string $url url (optional)
     * @param  string $photo photo (optional)
     * @param  bool $all all (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function companyAddMediaPost($aPIVERSION, $id = null, $customId = null, $category = null, $type = null, $url = null, $photo = null, $all = null, $checksum = null)
    {
        list($response) = $this->companyAddMediaPostWithHttpInfo($aPIVERSION, $id, $customId, $category, $type, $url, $photo, $all, $checksum);
        return $response;
    }

    /**
     * Operation companyAddMediaPostWithHttpInfo
     *
     * add media to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $category (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $photo (optional)
     * @param  bool $all (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyAddMediaPostWithHttpInfo($aPIVERSION, $id = null, $customId = null, $category = null, $type = null, $url = null, $photo = null, $all = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAddMediaPostRequest($aPIVERSION, $id, $customId, $category, $type, $url, $photo, $all, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyAddMediaPostAsync
     *
     * add media to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $category (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $photo (optional)
     * @param  bool $all (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAddMediaPostAsync($aPIVERSION, $id = null, $customId = null, $category = null, $type = null, $url = null, $photo = null, $all = null, $checksum = null)
    {
        return $this->companyAddMediaPostAsyncWithHttpInfo($aPIVERSION, $id, $customId, $category, $type, $url, $photo, $all, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyAddMediaPostAsyncWithHttpInfo
     *
     * add media to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $category (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $photo (optional)
     * @param  bool $all (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAddMediaPostAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $category = null, $type = null, $url = null, $photo = null, $all = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAddMediaPostRequest($aPIVERSION, $id, $customId, $category, $type, $url, $photo, $all, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyAddMediaPost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $category (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $photo (optional)
     * @param  bool $all (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyAddMediaPostRequest($aPIVERSION, $id = null, $customId = null, $category = null, $type = null, $url = null, $photo = null, $all = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyAddMediaPost'
            );
        }

        $resourcePath = '/company/add-media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($photo !== null) {
            $multipart = true;
            $formParams['photo'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($photo), 'rb');
        }
        // form params
        if ($all !== null) {
            $formParams['all'] = ObjectSerializer::toFormValue($all);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyAddPartnerPost
     *
     * add partner to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  string $type type (optional)
     * @param  string $url url (optional)
     * @param  string $logo logo (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function companyAddPartnerPost($aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $logo = null, $checksum = null)
    {
        list($response) = $this->companyAddPartnerPostWithHttpInfo($aPIVERSION, $id, $customId, $type, $url, $logo, $checksum);
        return $response;
    }

    /**
     * Operation companyAddPartnerPostWithHttpInfo
     *
     * add partner to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $logo (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyAddPartnerPostWithHttpInfo($aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $logo = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAddPartnerPostRequest($aPIVERSION, $id, $customId, $type, $url, $logo, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyAddPartnerPostAsync
     *
     * add partner to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $logo (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAddPartnerPostAsync($aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $logo = null, $checksum = null)
    {
        return $this->companyAddPartnerPostAsyncWithHttpInfo($aPIVERSION, $id, $customId, $type, $url, $logo, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyAddPartnerPostAsyncWithHttpInfo
     *
     * add partner to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $logo (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAddPartnerPostAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $logo = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAddPartnerPostRequest($aPIVERSION, $id, $customId, $type, $url, $logo, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyAddPartnerPost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $type (optional)
     * @param  string $url (optional)
     * @param  string $logo (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyAddPartnerPostRequest($aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $logo = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyAddPartnerPost'
            );
        }

        $resourcePath = '/company/add-partner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($logo !== null) {
            $multipart = true;
            $formParams['logo'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($logo), 'rb');
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyAddServicePost
     *
     * add service to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  int $serviceId serviceId (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function companyAddServicePost($aPIVERSION, $id = null, $customId = null, $serviceId = null, $checksum = null)
    {
        list($response) = $this->companyAddServicePostWithHttpInfo($aPIVERSION, $id, $customId, $serviceId, $checksum);
        return $response;
    }

    /**
     * Operation companyAddServicePostWithHttpInfo
     *
     * add service to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $serviceId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyAddServicePostWithHttpInfo($aPIVERSION, $id = null, $customId = null, $serviceId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAddServicePostRequest($aPIVERSION, $id, $customId, $serviceId, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyAddServicePostAsync
     *
     * add service to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $serviceId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAddServicePostAsync($aPIVERSION, $id = null, $customId = null, $serviceId = null, $checksum = null)
    {
        return $this->companyAddServicePostAsyncWithHttpInfo($aPIVERSION, $id, $customId, $serviceId, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyAddServicePostAsyncWithHttpInfo
     *
     * add service to company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $serviceId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAddServicePostAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $serviceId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAddServicePostRequest($aPIVERSION, $id, $customId, $serviceId, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyAddServicePost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $serviceId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyAddServicePostRequest($aPIVERSION, $id = null, $customId = null, $serviceId = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyAddServicePost'
            );
        }

        $resourcePath = '/company/add-service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($serviceId !== null) {
            $formParams['service_id'] = ObjectSerializer::toFormValue($serviceId);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyAttributesPost
     *
     * Replace Google attibuts of company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  object[] $attributes attributes (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function companyAttributesPost($aPIVERSION, $id = null, $customId = null, $attributes = null, $checksum = null)
    {
        list($response) = $this->companyAttributesPostWithHttpInfo($aPIVERSION, $id, $customId, $attributes, $checksum);
        return $response;
    }

    /**
     * Operation companyAttributesPostWithHttpInfo
     *
     * Replace Google attibuts of company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  object[] $attributes (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyAttributesPostWithHttpInfo($aPIVERSION, $id = null, $customId = null, $attributes = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAttributesPostRequest($aPIVERSION, $id, $customId, $attributes, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyAttributesPostAsync
     *
     * Replace Google attibuts of company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  object[] $attributes (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAttributesPostAsync($aPIVERSION, $id = null, $customId = null, $attributes = null, $checksum = null)
    {
        return $this->companyAttributesPostAsyncWithHttpInfo($aPIVERSION, $id, $customId, $attributes, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyAttributesPostAsyncWithHttpInfo
     *
     * Replace Google attibuts of company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  object[] $attributes (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyAttributesPostAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $attributes = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyAttributesPostRequest($aPIVERSION, $id, $customId, $attributes, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyAttributesPost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  object[] $attributes (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyAttributesPostRequest($aPIVERSION, $id = null, $customId = null, $attributes = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyAttributesPost'
            );
        }

        $resourcePath = '/company/attributes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($attributes !== null) {
            $formParams['attributes'] = ObjectSerializer::toFormValue($attributes);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyCreatePost
     *
     * Create company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId customId (optional)
     * @param  string $name name (optional)
     * @param  string $shortName shortName (optional)
     * @param  string $rsac rsac (optional)
     * @param  string $siret siret (optional)
     * @param  bool $enable enable (optional)
     * @param  int[] $activities activities (optional)
     * @param  string $phone phone (optional)
     * @param  string $fax fax (optional)
     * @param  string $email email (optional)
     * @param  string $website website (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $zipcode zipcode (optional)
     * @param  string $city city (optional)
     * @param  string $department department (optional)
     * @param  bool $hideCity hideCity (optional)
     * @param  bool $hideAddress hideAddress (optional)
     * @param  string $content content (optional)
     * @param  string $color color (optional)
     * @param  string $facebookPage facebookPage (optional)
     * @param  string $twitterPage twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime openingTime (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2003
     */
    public function companyCreatePost($aPIVERSION, $customId = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $checksum = null)
    {
        list($response) = $this->companyCreatePostWithHttpInfo($aPIVERSION, $customId, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $checksum);
        return $response;
    }

    /**
     * Operation companyCreatePostWithHttpInfo
     *
     * Create company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyCreatePostWithHttpInfo($aPIVERSION, $customId = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2003';
        $request = $this->companyCreatePostRequest($aPIVERSION, $customId, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyCreatePostAsync
     *
     * Create company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyCreatePostAsync($aPIVERSION, $customId = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $checksum = null)
    {
        return $this->companyCreatePostAsyncWithHttpInfo($aPIVERSION, $customId, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyCreatePostAsyncWithHttpInfo
     *
     * Create company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyCreatePostAsyncWithHttpInfo($aPIVERSION, $customId = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2003';
        $request = $this->companyCreatePostRequest($aPIVERSION, $customId, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyCreatePost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyCreatePostRequest($aPIVERSION, $customId = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyCreatePost'
            );
        }

        $resourcePath = '/company/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($shortName !== null) {
            $formParams['short_name'] = ObjectSerializer::toFormValue($shortName);
        }
        // form params
        if ($rsac !== null) {
            $formParams['rsac'] = ObjectSerializer::toFormValue($rsac);
        }
        // form params
        if ($siret !== null) {
            $formParams['siret'] = ObjectSerializer::toFormValue($siret);
        }
        // form params
        if ($enable !== null) {
            $formParams['enable'] = ObjectSerializer::toFormValue($enable);
        }
        // form params
        if ($activities !== null) {
            $formParams['activities'] = ObjectSerializer::toFormValue($activities);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($fax !== null) {
            $formParams['fax'] = ObjectSerializer::toFormValue($fax);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($website !== null) {
            $formParams['website'] = ObjectSerializer::toFormValue($website);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = ObjectSerializer::toFormValue($address);
        }
        // form params
        if ($address2 !== null) {
            $formParams['address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($zipcode !== null) {
            $formParams['zipcode'] = ObjectSerializer::toFormValue($zipcode);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($department !== null) {
            $formParams['department'] = ObjectSerializer::toFormValue($department);
        }
        // form params
        if ($hideCity !== null) {
            $formParams['hide_city'] = ObjectSerializer::toFormValue($hideCity);
        }
        // form params
        if ($hideAddress !== null) {
            $formParams['hide_address'] = ObjectSerializer::toFormValue($hideAddress);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // form params
        if ($color !== null) {
            $formParams['color'] = ObjectSerializer::toFormValue($color);
        }
        // form params
        if ($facebookPage !== null) {
            $formParams['facebook_page'] = ObjectSerializer::toFormValue($facebookPage);
        }
        // form params
        if ($twitterPage !== null) {
            $formParams['twitter_page'] = ObjectSerializer::toFormValue($twitterPage);
        }
        // form params
        if ($openingTime !== null) {
            $formParams['opening_time'] = ObjectSerializer::toFormValue($openingTime);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyDeleteMediaDelete
     *
     * delete media from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $category media category to add among logo, background and gallery (optional)
     * @param  int $index Index of the item to be deleted in the company&#x27;s media list. Only for the gallery type. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function companyDeleteMediaDelete($checksum, $aPIVERSION, $id = null, $customId = null, $category = null, $index = null)
    {
        list($response) = $this->companyDeleteMediaDeleteWithHttpInfo($checksum, $aPIVERSION, $id, $customId, $category, $index);
        return $response;
    }

    /**
     * Operation companyDeleteMediaDeleteWithHttpInfo
     *
     * delete media from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $category media category to add among logo, background and gallery (optional)
     * @param  int $index Index of the item to be deleted in the company&#x27;s media list. Only for the gallery type. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyDeleteMediaDeleteWithHttpInfo($checksum, $aPIVERSION, $id = null, $customId = null, $category = null, $index = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyDeleteMediaDeleteRequest($checksum, $aPIVERSION, $id, $customId, $category, $index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyDeleteMediaDeleteAsync
     *
     * delete media from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $category media category to add among logo, background and gallery (optional)
     * @param  int $index Index of the item to be deleted in the company&#x27;s media list. Only for the gallery type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyDeleteMediaDeleteAsync($checksum, $aPIVERSION, $id = null, $customId = null, $category = null, $index = null)
    {
        return $this->companyDeleteMediaDeleteAsyncWithHttpInfo($checksum, $aPIVERSION, $id, $customId, $category, $index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyDeleteMediaDeleteAsyncWithHttpInfo
     *
     * delete media from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $category media category to add among logo, background and gallery (optional)
     * @param  int $index Index of the item to be deleted in the company&#x27;s media list. Only for the gallery type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyDeleteMediaDeleteAsyncWithHttpInfo($checksum, $aPIVERSION, $id = null, $customId = null, $category = null, $index = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyDeleteMediaDeleteRequest($checksum, $aPIVERSION, $id, $customId, $category, $index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyDeleteMediaDelete'
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $category media category to add among logo, background and gallery (optional)
     * @param  int $index Index of the item to be deleted in the company&#x27;s media list. Only for the gallery type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyDeleteMediaDeleteRequest($checksum, $aPIVERSION, $id = null, $customId = null, $category = null, $index = null)
    {
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling companyDeleteMediaDelete'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyDeleteMediaDelete'
            );
        }

        $resourcePath = '/company/delete-media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($customId !== null) {
            $queryParams['custom_id'] = ObjectSerializer::toQueryValue($customId, null);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category, null);
        }
        // query params
        if ($index !== null) {
            $queryParams['index'] = ObjectSerializer::toQueryValue($index, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyDeletePartnerDelete
     *
     * delete partner from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $type immodvisor or external, specifies if it is a partner customer of Immodvisor or other (optional)
     * @param  string $url url (optional)
     * @param  int $index only for type external, position of the element to be deleted in the list of external partners received via the endpoint company/get (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function companyDeletePartnerDelete($checksum, $aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $index = null)
    {
        list($response) = $this->companyDeletePartnerDeleteWithHttpInfo($checksum, $aPIVERSION, $id, $customId, $type, $url, $index);
        return $response;
    }

    /**
     * Operation companyDeletePartnerDeleteWithHttpInfo
     *
     * delete partner from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $type immodvisor or external, specifies if it is a partner customer of Immodvisor or other (optional)
     * @param  string $url (optional)
     * @param  int $index only for type external, position of the element to be deleted in the list of external partners received via the endpoint company/get (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyDeletePartnerDeleteWithHttpInfo($checksum, $aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $index = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyDeletePartnerDeleteRequest($checksum, $aPIVERSION, $id, $customId, $type, $url, $index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyDeletePartnerDeleteAsync
     *
     * delete partner from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $type immodvisor or external, specifies if it is a partner customer of Immodvisor or other (optional)
     * @param  string $url (optional)
     * @param  int $index only for type external, position of the element to be deleted in the list of external partners received via the endpoint company/get (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyDeletePartnerDeleteAsync($checksum, $aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $index = null)
    {
        return $this->companyDeletePartnerDeleteAsyncWithHttpInfo($checksum, $aPIVERSION, $id, $customId, $type, $url, $index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyDeletePartnerDeleteAsyncWithHttpInfo
     *
     * delete partner from company
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $type immodvisor or external, specifies if it is a partner customer of Immodvisor or other (optional)
     * @param  string $url (optional)
     * @param  int $index only for type external, position of the element to be deleted in the list of external partners received via the endpoint company/get (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyDeletePartnerDeleteAsyncWithHttpInfo($checksum, $aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $index = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyDeletePartnerDeleteRequest($checksum, $aPIVERSION, $id, $customId, $type, $url, $index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyDeletePartnerDelete'
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     * @param  string $type immodvisor or external, specifies if it is a partner customer of Immodvisor or other (optional)
     * @param  string $url (optional)
     * @param  int $index only for type external, position of the element to be deleted in the list of external partners received via the endpoint company/get (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyDeletePartnerDeleteRequest($checksum, $aPIVERSION, $id = null, $customId = null, $type = null, $url = null, $index = null)
    {
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling companyDeletePartnerDelete'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyDeletePartnerDelete'
            );
        }

        $resourcePath = '/company/delete-partner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($customId !== null) {
            $queryParams['custom_id'] = ObjectSerializer::toQueryValue($customId, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($url !== null) {
            $queryParams['url'] = ObjectSerializer::toQueryValue($url, null);
        }
        // query params
        if ($index !== null) {
            $queryParams['index'] = ObjectSerializer::toQueryValue($index, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyDeleteServiceDelete
     *
     * delete service from company
     *
     * @param  int $serviceId Service&#x27;s identifier to be added (required)
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function companyDeleteServiceDelete($serviceId, $checksum, $aPIVERSION, $id = null, $customId = null)
    {
        list($response) = $this->companyDeleteServiceDeleteWithHttpInfo($serviceId, $checksum, $aPIVERSION, $id, $customId);
        return $response;
    }

    /**
     * Operation companyDeleteServiceDeleteWithHttpInfo
     *
     * delete service from company
     *
     * @param  int $serviceId Service&#x27;s identifier to be added (required)
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyDeleteServiceDeleteWithHttpInfo($serviceId, $checksum, $aPIVERSION, $id = null, $customId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyDeleteServiceDeleteRequest($serviceId, $checksum, $aPIVERSION, $id, $customId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyDeleteServiceDeleteAsync
     *
     * delete service from company
     *
     * @param  int $serviceId Service&#x27;s identifier to be added (required)
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyDeleteServiceDeleteAsync($serviceId, $checksum, $aPIVERSION, $id = null, $customId = null)
    {
        return $this->companyDeleteServiceDeleteAsyncWithHttpInfo($serviceId, $checksum, $aPIVERSION, $id, $customId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyDeleteServiceDeleteAsyncWithHttpInfo
     *
     * delete service from company
     *
     * @param  int $serviceId Service&#x27;s identifier to be added (required)
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyDeleteServiceDeleteAsyncWithHttpInfo($serviceId, $checksum, $aPIVERSION, $id = null, $customId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->companyDeleteServiceDeleteRequest($serviceId, $checksum, $aPIVERSION, $id, $customId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyDeleteServiceDelete'
     *
     * @param  int $serviceId Service&#x27;s identifier to be added (required)
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id unique Immodvisor company ID to update (company or brand). optional if custom_id present. (optional)
     * @param  string $customId Your unique company&#x27;s identifier to update (company or brand). Optional if id present. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyDeleteServiceDeleteRequest($serviceId, $checksum, $aPIVERSION, $id = null, $customId = null)
    {
        // verify the required parameter 'serviceId' is set
        if ($serviceId === null || (is_array($serviceId) && count($serviceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceId when calling companyDeleteServiceDelete'
            );
        }
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling companyDeleteServiceDelete'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyDeleteServiceDelete'
            );
        }

        $resourcePath = '/company/delete-service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($customId !== null) {
            $queryParams['custom_id'] = ObjectSerializer::toQueryValue($customId, null);
        }
        // query params
        if ($serviceId !== null) {
            $queryParams['service_id'] = ObjectSerializer::toQueryValue($serviceId, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyGetGet
     *
     * get company's informations
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id Immodvisor ID (optional)
     * @param  int $customId Company&#x27;s personalized identifier. (optional)
     * @param  int $nbrReviews last notices&#x27; number to return. Possible values : 0 : default value, tags nbr_reviews and reviews are not returned. -1 : all reviews are sent [int] : last reviews sent last number (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse200
     */
    public function companyGetGet($checksum, $aPIVERSION, $id = null, $customId = null, $nbrReviews = null)
    {
        list($response) = $this->companyGetGetWithHttpInfo($checksum, $aPIVERSION, $id, $customId, $nbrReviews);
        return $response;
    }

    /**
     * Operation companyGetGetWithHttpInfo
     *
     * get company's informations
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id Immodvisor ID (optional)
     * @param  int $customId Company&#x27;s personalized identifier. (optional)
     * @param  int $nbrReviews last notices&#x27; number to return. Possible values : 0 : default value, tags nbr_reviews and reviews are not returned. -1 : all reviews are sent [int] : last reviews sent last number (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyGetGetWithHttpInfo($checksum, $aPIVERSION, $id = null, $customId = null, $nbrReviews = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse200';
        $request = $this->companyGetGetRequest($checksum, $aPIVERSION, $id, $customId, $nbrReviews);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyGetGetAsync
     *
     * get company's informations
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id Immodvisor ID (optional)
     * @param  int $customId Company&#x27;s personalized identifier. (optional)
     * @param  int $nbrReviews last notices&#x27; number to return. Possible values : 0 : default value, tags nbr_reviews and reviews are not returned. -1 : all reviews are sent [int] : last reviews sent last number (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetGetAsync($checksum, $aPIVERSION, $id = null, $customId = null, $nbrReviews = null)
    {
        return $this->companyGetGetAsyncWithHttpInfo($checksum, $aPIVERSION, $id, $customId, $nbrReviews)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyGetGetAsyncWithHttpInfo
     *
     * get company's informations
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id Immodvisor ID (optional)
     * @param  int $customId Company&#x27;s personalized identifier. (optional)
     * @param  int $nbrReviews last notices&#x27; number to return. Possible values : 0 : default value, tags nbr_reviews and reviews are not returned. -1 : all reviews are sent [int] : last reviews sent last number (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetGetAsyncWithHttpInfo($checksum, $aPIVERSION, $id = null, $customId = null, $nbrReviews = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse200';
        $request = $this->companyGetGetRequest($checksum, $aPIVERSION, $id, $customId, $nbrReviews);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyGetGet'
     *
     * @param  string $checksum Request&#x27;s validity&#x27;s checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id Immodvisor ID (optional)
     * @param  int $customId Company&#x27;s personalized identifier. (optional)
     * @param  int $nbrReviews last notices&#x27; number to return. Possible values : 0 : default value, tags nbr_reviews and reviews are not returned. -1 : all reviews are sent [int] : last reviews sent last number (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyGetGetRequest($checksum, $aPIVERSION, $id = null, $customId = null, $nbrReviews = null)
    {
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling companyGetGet'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyGetGet'
            );
        }

        $resourcePath = '/company/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($customId !== null) {
            $queryParams['custom_id'] = ObjectSerializer::toQueryValue($customId, null);
        }
        // query params
        if ($nbrReviews !== null) {
            $queryParams['nbr_reviews'] = ObjectSerializer::toQueryValue($nbrReviews, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyListGet
     *
     * Company's list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $nbrReviews Last notices&#x27; number to return per company.  By default 0, maximum 5. To retrieve previous notices, see the reviewList() service. This parameter adds an array of reviews objects to the return. (optional)
     * @param  bool $enable if true returns only active companies, if false returns all companies. True by default. (optional, default to true)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2001
     */
    public function companyListGet($checksum, $aPIVERSION, $nbrReviews = null, $enable = 'true')
    {
        list($response) = $this->companyListGetWithHttpInfo($checksum, $aPIVERSION, $nbrReviews, $enable);
        return $response;
    }

    /**
     * Operation companyListGetWithHttpInfo
     *
     * Company's list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $nbrReviews Last notices&#x27; number to return per company.  By default 0, maximum 5. To retrieve previous notices, see the reviewList() service. This parameter adds an array of reviews objects to the return. (optional)
     * @param  bool $enable if true returns only active companies, if false returns all companies. True by default. (optional, default to true)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyListGetWithHttpInfo($checksum, $aPIVERSION, $nbrReviews = null, $enable = 'true')
    {
        $returnType = '\Immodvisor\Model\InlineResponse2001';
        $request = $this->companyListGetRequest($checksum, $aPIVERSION, $nbrReviews, $enable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyListGetAsync
     *
     * Company's list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $nbrReviews Last notices&#x27; number to return per company.  By default 0, maximum 5. To retrieve previous notices, see the reviewList() service. This parameter adds an array of reviews objects to the return. (optional)
     * @param  bool $enable if true returns only active companies, if false returns all companies. True by default. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyListGetAsync($checksum, $aPIVERSION, $nbrReviews = null, $enable = 'true')
    {
        return $this->companyListGetAsyncWithHttpInfo($checksum, $aPIVERSION, $nbrReviews, $enable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyListGetAsyncWithHttpInfo
     *
     * Company's list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $nbrReviews Last notices&#x27; number to return per company.  By default 0, maximum 5. To retrieve previous notices, see the reviewList() service. This parameter adds an array of reviews objects to the return. (optional)
     * @param  bool $enable if true returns only active companies, if false returns all companies. True by default. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyListGetAsyncWithHttpInfo($checksum, $aPIVERSION, $nbrReviews = null, $enable = 'true')
    {
        $returnType = '\Immodvisor\Model\InlineResponse2001';
        $request = $this->companyListGetRequest($checksum, $aPIVERSION, $nbrReviews, $enable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyListGet'
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $nbrReviews Last notices&#x27; number to return per company.  By default 0, maximum 5. To retrieve previous notices, see the reviewList() service. This parameter adds an array of reviews objects to the return. (optional)
     * @param  bool $enable if true returns only active companies, if false returns all companies. True by default. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyListGetRequest($checksum, $aPIVERSION, $nbrReviews = null, $enable = 'true')
    {
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling companyListGet'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyListGet'
            );
        }

        $resourcePath = '/company/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($nbrReviews !== null) {
            $queryParams['nbr_reviews'] = ObjectSerializer::toQueryValue($nbrReviews, null);
        }
        // query params
        if ($enable !== null) {
            $queryParams['enable'] = ObjectSerializer::toQueryValue($enable, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyRichsnippetsGet
     *
     * Company's rich snippet code
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2002
     */
    public function companyRichsnippetsGet($checksum, $aPIVERSION)
    {
        list($response) = $this->companyRichsnippetsGetWithHttpInfo($checksum, $aPIVERSION);
        return $response;
    }

    /**
     * Operation companyRichsnippetsGetWithHttpInfo
     *
     * Company's rich snippet code
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyRichsnippetsGetWithHttpInfo($checksum, $aPIVERSION)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2002';
        $request = $this->companyRichsnippetsGetRequest($checksum, $aPIVERSION);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyRichsnippetsGetAsync
     *
     * Company's rich snippet code
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyRichsnippetsGetAsync($checksum, $aPIVERSION)
    {
        return $this->companyRichsnippetsGetAsyncWithHttpInfo($checksum, $aPIVERSION)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyRichsnippetsGetAsyncWithHttpInfo
     *
     * Company's rich snippet code
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyRichsnippetsGetAsyncWithHttpInfo($checksum, $aPIVERSION)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2002';
        $request = $this->companyRichsnippetsGetRequest($checksum, $aPIVERSION);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyRichsnippetsGet'
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyRichsnippetsGetRequest($checksum, $aPIVERSION)
    {
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling companyRichsnippetsGet'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyRichsnippetsGet'
            );
        }

        $resourcePath = '/company/richsnippets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyUpdatePut
     *
     * Update company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  bool $visible visible (optional)
     * @param  string $name name (optional)
     * @param  string $shortName shortName (optional)
     * @param  string $rsac rsac (optional)
     * @param  string $siret siret (optional)
     * @param  bool $enable enable (optional)
     * @param  int[] $activities activities (optional)
     * @param  string $phone phone (optional)
     * @param  string $fax fax (optional)
     * @param  string $email email (optional)
     * @param  string $website website (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $zipcode zipcode (optional)
     * @param  string $city city (optional)
     * @param  string $department department (optional)
     * @param  bool $hideCity hideCity (optional)
     * @param  bool $hideAddress hideAddress (optional)
     * @param  string $content content (optional)
     * @param  string $color color (optional)
     * @param  string $facebookPage facebookPage (optional)
     * @param  string $twitterPage twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime openingTime (optional)
     * @param  \Immodvisor\Model\ServiceArea[] $serviceArea serviceArea (optional)
     * @param  string $googleDescription googleDescription (optional)
     * @param  string $shortDescription shortDescription (optional)
     * @param  string $longDescription longDescription (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2003
     */
    public function companyUpdatePut($aPIVERSION, $id = null, $customId = null, $visible = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $serviceArea = null, $googleDescription = null, $shortDescription = null, $longDescription = null, $checksum = null)
    {
        list($response) = $this->companyUpdatePutWithHttpInfo($aPIVERSION, $id, $customId, $visible, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $serviceArea, $googleDescription, $shortDescription, $longDescription, $checksum);
        return $response;
    }

    /**
     * Operation companyUpdatePutWithHttpInfo
     *
     * Update company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  bool $visible (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  \Immodvisor\Model\ServiceArea[] $serviceArea (optional)
     * @param  string $googleDescription (optional)
     * @param  string $shortDescription (optional)
     * @param  string $longDescription (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyUpdatePutWithHttpInfo($aPIVERSION, $id = null, $customId = null, $visible = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $serviceArea = null, $googleDescription = null, $shortDescription = null, $longDescription = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2003';
        $request = $this->companyUpdatePutRequest($aPIVERSION, $id, $customId, $visible, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $serviceArea, $googleDescription, $shortDescription, $longDescription, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyUpdatePutAsync
     *
     * Update company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  bool $visible (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  \Immodvisor\Model\ServiceArea[] $serviceArea (optional)
     * @param  string $googleDescription (optional)
     * @param  string $shortDescription (optional)
     * @param  string $longDescription (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyUpdatePutAsync($aPIVERSION, $id = null, $customId = null, $visible = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $serviceArea = null, $googleDescription = null, $shortDescription = null, $longDescription = null, $checksum = null)
    {
        return $this->companyUpdatePutAsyncWithHttpInfo($aPIVERSION, $id, $customId, $visible, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $serviceArea, $googleDescription, $shortDescription, $longDescription, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyUpdatePutAsyncWithHttpInfo
     *
     * Update company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  bool $visible (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  \Immodvisor\Model\ServiceArea[] $serviceArea (optional)
     * @param  string $googleDescription (optional)
     * @param  string $shortDescription (optional)
     * @param  string $longDescription (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyUpdatePutAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $visible = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $serviceArea = null, $googleDescription = null, $shortDescription = null, $longDescription = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2003';
        $request = $this->companyUpdatePutRequest($aPIVERSION, $id, $customId, $visible, $name, $shortName, $rsac, $siret, $enable, $activities, $phone, $fax, $email, $website, $address, $address2, $zipcode, $city, $department, $hideCity, $hideAddress, $content, $color, $facebookPage, $twitterPage, $openingTime, $serviceArea, $googleDescription, $shortDescription, $longDescription, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyUpdatePut'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  bool $visible (optional)
     * @param  string $name (optional)
     * @param  string $shortName (optional)
     * @param  string $rsac (optional)
     * @param  string $siret (optional)
     * @param  bool $enable (optional)
     * @param  int[] $activities (optional)
     * @param  string $phone (optional)
     * @param  string $fax (optional)
     * @param  string $email (optional)
     * @param  string $website (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $department (optional)
     * @param  bool $hideCity (optional)
     * @param  bool $hideAddress (optional)
     * @param  string $content (optional)
     * @param  string $color (optional)
     * @param  string $facebookPage (optional)
     * @param  string $twitterPage (optional)
     * @param  \Immodvisor\Model\CompanycreateOpeningTime $openingTime (optional)
     * @param  \Immodvisor\Model\ServiceArea[] $serviceArea (optional)
     * @param  string $googleDescription (optional)
     * @param  string $shortDescription (optional)
     * @param  string $longDescription (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyUpdatePutRequest($aPIVERSION, $id = null, $customId = null, $visible = null, $name = null, $shortName = null, $rsac = null, $siret = null, $enable = null, $activities = null, $phone = null, $fax = null, $email = null, $website = null, $address = null, $address2 = null, $zipcode = null, $city = null, $department = null, $hideCity = null, $hideAddress = null, $content = null, $color = null, $facebookPage = null, $twitterPage = null, $openingTime = null, $serviceArea = null, $googleDescription = null, $shortDescription = null, $longDescription = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling companyUpdatePut'
            );
        }

        $resourcePath = '/company/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($visible !== null) {
            $formParams['visible'] = ObjectSerializer::toFormValue($visible);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($shortName !== null) {
            $formParams['short_name'] = ObjectSerializer::toFormValue($shortName);
        }
        // form params
        if ($rsac !== null) {
            $formParams['rsac'] = ObjectSerializer::toFormValue($rsac);
        }
        // form params
        if ($siret !== null) {
            $formParams['siret'] = ObjectSerializer::toFormValue($siret);
        }
        // form params
        if ($enable !== null) {
            $formParams['enable'] = ObjectSerializer::toFormValue($enable);
        }
        // form params
        if ($activities !== null) {
            $formParams['activities'] = ObjectSerializer::toFormValue($activities);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($fax !== null) {
            $formParams['fax'] = ObjectSerializer::toFormValue($fax);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($website !== null) {
            $formParams['website'] = ObjectSerializer::toFormValue($website);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = ObjectSerializer::toFormValue($address);
        }
        // form params
        if ($address2 !== null) {
            $formParams['address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($zipcode !== null) {
            $formParams['zipcode'] = ObjectSerializer::toFormValue($zipcode);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($department !== null) {
            $formParams['department'] = ObjectSerializer::toFormValue($department);
        }
        // form params
        if ($hideCity !== null) {
            $formParams['hide_city'] = ObjectSerializer::toFormValue($hideCity);
        }
        // form params
        if ($hideAddress !== null) {
            $formParams['hide_address'] = ObjectSerializer::toFormValue($hideAddress);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // form params
        if ($color !== null) {
            $formParams['color'] = ObjectSerializer::toFormValue($color);
        }
        // form params
        if ($facebookPage !== null) {
            $formParams['facebook_page'] = ObjectSerializer::toFormValue($facebookPage);
        }
        // form params
        if ($twitterPage !== null) {
            $formParams['twitter_page'] = ObjectSerializer::toFormValue($twitterPage);
        }
        // form params
        if ($openingTime !== null) {
            $formParams['opening_time'] = ObjectSerializer::toFormValue($openingTime);
        }
        // form params
        if ($serviceArea !== null) {
            $formParams['service_area'] = ObjectSerializer::toFormValue($serviceArea);
        }
        // form params
        if ($googleDescription !== null) {
            $formParams['google_description'] = ObjectSerializer::toFormValue($googleDescription);
        }
        // form params
        if ($shortDescription !== null) {
            $formParams['short_description'] = ObjectSerializer::toFormValue($shortDescription);
        }
        // form params
        if ($longDescription !== null) {
            $formParams['long_description'] = ObjectSerializer::toFormValue($longDescription);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
