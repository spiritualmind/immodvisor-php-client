<?php
/**
 * ProApi
 * PHP version 5
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Immodvisor
 *
 * ## Terms of use    \\n\\nThe terms of use gather all the rules to follow to use the Immodvisor API. ## Technical side Your API key and the grains of salt of the checksums must remain secret, they represent your private parameters. It is strictly forbidden to communicate them to third parties. For security reasons, if one of these rules is not respected, we would be forced to deactivate your API key. ## Advices It is strongly recommended to use cache if you are using the API to display your rating and reviews on your site. This will ensure that the display of your page does not depend on the API responses and therefore does not affect its display time. ## Display the notices on your media ### On your website: You must clearly display the source of the reviews, namely Immodvisor. Thus, the Immodvisor logo or the seal of trust must clearly appear on the page displaying the reviews, with a link in the href, scanned by search engines, and pointing to the company file of the Immodvisor site. This point is essential for search engines to make the link between the 2 pages, and avoid duplication of content. The review pages of your site must be validated by our marketing department before going into production. You must also display a textual mention indicating that the reviews come from the Immodvisor site.   Our marketing department can be reached at 09 81 10 75 88 or by email at assistance@Immodvisor.com ### On other communication supports: You must always display the Immodvisor logo and indicate that the reviews are from the Immodvisor solution.  ## Display Rich Snippets in google results on your url Rich Snippets give the promise to the internet user to be able to read reviews. Any page displaying Rich Snippets in google must display the stars, as well as a link to the company's Immodvisor page. All these elements must match. For example, you can display the Rich Snippets of the company on the home page, and the Rich Snippets of each agency on your respective agency pages. Strong recommendation: a given Rich Snippet should only be placed on one and only one web page. Good to know: Rich Snippets tell Google's search engine a rating related to a web page. Google decides whether or not displaying the note in its search results is relevant to your web page. Immodvisor cannot influence Google's willingness to display or not the indicators sent by your site. ## Checksum For each call to the API, a checksum must be sent. This checksum is calculated as follows:   Concatenation of the following values, all formatted in SHA1 :  * apikey * values of the sent fields, formatted in JSON if it is an array or an object * checksum_salt_in  ### PHP code example ```PHP private function calcChecksumIn($api_key, $checksum_salt_in, $datas = array())     {         $checksum = \"\";         $checksum .= $api_key;         foreach ($datas as $k => $v) {             if (is_array($v) || is_object($v)) {                 $v = json_encode($v, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);             } elseif ($v === true) {                 $v = 1;             } elseif ($v === false) {                 $v = 0;             }             $checksum .= $v;         }         $checksum .= $checksum_salt_in;         return sha1($checksum);     }   ```
 *
 * OpenAPI spec version: 1.11.0
 * Contact: assistance@Immodvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Immodvisor\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Immodvisor\ApiException;
use Immodvisor\Configuration;
use Immodvisor\HeaderSelector;
use Immodvisor\ObjectSerializer;

/**
 * ProApi Class Doc Comment
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation proCreatePost
     *
     * create pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId companyId (optional)
     * @param  int $companyCustomId companyCustomId (optional)
     * @param  string $email email (optional)
     * @param  string $customId customId (optional)
     * @param  bool $enable enable (optional)
     * @param  string $firstname firstname (optional)
     * @param  string $lastname lastname (optional)
     * @param  string $job job (optional)
     * @param  string $phone phone (optional)
     * @param  string $mobile mobile (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $zipcode zipcode (optional)
     * @param  string $city city (optional)
     * @param  string $language language (optional)
     * @param  bool $aclAapp aclAapp (optional)
     * @param  bool $aclPro aclPro (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2006
     */
    public function proCreatePost($aPIVERSION, $companyId = null, $companyCustomId = null, $email = null, $customId = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        list($response) = $this->proCreatePostWithHttpInfo($aPIVERSION, $companyId, $companyCustomId, $email, $customId, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum);
        return $response;
    }

    /**
     * Operation proCreatePostWithHttpInfo
     *
     * create pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  int $companyCustomId (optional)
     * @param  string $email (optional)
     * @param  string $customId (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function proCreatePostWithHttpInfo($aPIVERSION, $companyId = null, $companyCustomId = null, $email = null, $customId = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proCreatePostRequest($aPIVERSION, $companyId, $companyCustomId, $email, $customId, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proCreatePostAsync
     *
     * create pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  int $companyCustomId (optional)
     * @param  string $email (optional)
     * @param  string $customId (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proCreatePostAsync($aPIVERSION, $companyId = null, $companyCustomId = null, $email = null, $customId = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        return $this->proCreatePostAsyncWithHttpInfo($aPIVERSION, $companyId, $companyCustomId, $email, $customId, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proCreatePostAsyncWithHttpInfo
     *
     * create pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  int $companyCustomId (optional)
     * @param  string $email (optional)
     * @param  string $customId (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proCreatePostAsyncWithHttpInfo($aPIVERSION, $companyId = null, $companyCustomId = null, $email = null, $customId = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proCreatePostRequest($aPIVERSION, $companyId, $companyCustomId, $email, $customId, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proCreatePost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  int $companyCustomId (optional)
     * @param  string $email (optional)
     * @param  string $customId (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proCreatePostRequest($aPIVERSION, $companyId = null, $companyCustomId = null, $email = null, $customId = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling proCreatePost'
            );
        }

        $resourcePath = '/pro/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($companyId !== null) {
            $formParams['company_id'] = ObjectSerializer::toFormValue($companyId);
        }
        // form params
        if ($companyCustomId !== null) {
            $formParams['company_custom_id'] = ObjectSerializer::toFormValue($companyCustomId);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($enable !== null) {
            $formParams['enable'] = ObjectSerializer::toFormValue($enable);
        }
        // form params
        if ($firstname !== null) {
            $formParams['firstname'] = ObjectSerializer::toFormValue($firstname);
        }
        // form params
        if ($lastname !== null) {
            $formParams['lastname'] = ObjectSerializer::toFormValue($lastname);
        }
        // form params
        if ($job !== null) {
            $formParams['job'] = ObjectSerializer::toFormValue($job);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($mobile !== null) {
            $formParams['mobile'] = ObjectSerializer::toFormValue($mobile);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = ObjectSerializer::toFormValue($address);
        }
        // form params
        if ($address2 !== null) {
            $formParams['address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($zipcode !== null) {
            $formParams['zipcode'] = ObjectSerializer::toFormValue($zipcode);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($language !== null) {
            $formParams['language'] = ObjectSerializer::toFormValue($language);
        }
        // form params
        if ($aclAapp !== null) {
            $formParams['acl_aapp'] = ObjectSerializer::toFormValue($aclAapp);
        }
        // form params
        if ($aclPro !== null) {
            $formParams['acl_pro'] = ObjectSerializer::toFormValue($aclPro);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proGetGet
     *
     * get pro's informations
     *
     * @param  int $id Immodvisor unique identifier of the pro account (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your&#x27;s unique identifier (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2006
     */
    public function proGetGet($id, $checksum, $aPIVERSION, $customId = null)
    {
        list($response) = $this->proGetGetWithHttpInfo($id, $checksum, $aPIVERSION, $customId);
        return $response;
    }

    /**
     * Operation proGetGetWithHttpInfo
     *
     * get pro's informations
     *
     * @param  int $id Immodvisor unique identifier of the pro account (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your&#x27;s unique identifier (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function proGetGetWithHttpInfo($id, $checksum, $aPIVERSION, $customId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proGetGetRequest($id, $checksum, $aPIVERSION, $customId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proGetGetAsync
     *
     * get pro's informations
     *
     * @param  int $id Immodvisor unique identifier of the pro account (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your&#x27;s unique identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proGetGetAsync($id, $checksum, $aPIVERSION, $customId = null)
    {
        return $this->proGetGetAsyncWithHttpInfo($id, $checksum, $aPIVERSION, $customId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proGetGetAsyncWithHttpInfo
     *
     * get pro's informations
     *
     * @param  int $id Immodvisor unique identifier of the pro account (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your&#x27;s unique identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proGetGetAsyncWithHttpInfo($id, $checksum, $aPIVERSION, $customId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proGetGetRequest($id, $checksum, $aPIVERSION, $customId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proGetGet'
     *
     * @param  int $id Immodvisor unique identifier of the pro account (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your&#x27;s unique identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proGetGetRequest($id, $checksum, $aPIVERSION, $customId = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proGetGet'
            );
        }
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling proGetGet'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling proGetGet'
            );
        }

        $resourcePath = '/pro/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($customId !== null) {
            $queryParams['custom_id'] = ObjectSerializer::toQueryValue($customId, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proLinkPost
     *
     * Associate a pro to a company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  int $companyId companyId (optional)
     * @param  string $companyCustomId companyCustomId (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2006
     */
    public function proLinkPost($aPIVERSION, $id = null, $customId = null, $companyId = null, $companyCustomId = null, $checksum = null)
    {
        list($response) = $this->proLinkPostWithHttpInfo($aPIVERSION, $id, $customId, $companyId, $companyCustomId, $checksum);
        return $response;
    }

    /**
     * Operation proLinkPostWithHttpInfo
     *
     * Associate a pro to a company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function proLinkPostWithHttpInfo($aPIVERSION, $id = null, $customId = null, $companyId = null, $companyCustomId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proLinkPostRequest($aPIVERSION, $id, $customId, $companyId, $companyCustomId, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proLinkPostAsync
     *
     * Associate a pro to a company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proLinkPostAsync($aPIVERSION, $id = null, $customId = null, $companyId = null, $companyCustomId = null, $checksum = null)
    {
        return $this->proLinkPostAsyncWithHttpInfo($aPIVERSION, $id, $customId, $companyId, $companyCustomId, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proLinkPostAsyncWithHttpInfo
     *
     * Associate a pro to a company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proLinkPostAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $companyId = null, $companyCustomId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proLinkPostRequest($aPIVERSION, $id, $customId, $companyId, $companyCustomId, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proLinkPost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proLinkPostRequest($aPIVERSION, $id = null, $customId = null, $companyId = null, $companyCustomId = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling proLinkPost'
            );
        }

        $resourcePath = '/pro/link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($companyId !== null) {
            $formParams['company_id'] = ObjectSerializer::toFormValue($companyId);
        }
        // form params
        if ($companyCustomId !== null) {
            $formParams['company_custom_id'] = ObjectSerializer::toFormValue($companyCustomId);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proListGet
     *
     * Get pros' list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId Immodvisor company ID (company or brand) (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID (company or brand). (optional)
     * @param  bool $enable If &#x27;true&#x27;, only get activated pros in the activated companies too. &#x27;true&#x27; by default. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2007
     */
    public function proListGet($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null, $enable = null)
    {
        list($response) = $this->proListGetWithHttpInfo($checksum, $aPIVERSION, $companyId, $companyCustomId, $enable);
        return $response;
    }

    /**
     * Operation proListGetWithHttpInfo
     *
     * Get pros' list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId Immodvisor company ID (company or brand) (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID (company or brand). (optional)
     * @param  bool $enable If &#x27;true&#x27;, only get activated pros in the activated companies too. &#x27;true&#x27; by default. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function proListGetWithHttpInfo($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null, $enable = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2007';
        $request = $this->proListGetRequest($checksum, $aPIVERSION, $companyId, $companyCustomId, $enable);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proListGetAsync
     *
     * Get pros' list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId Immodvisor company ID (company or brand) (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID (company or brand). (optional)
     * @param  bool $enable If &#x27;true&#x27;, only get activated pros in the activated companies too. &#x27;true&#x27; by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proListGetAsync($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null, $enable = null)
    {
        return $this->proListGetAsyncWithHttpInfo($checksum, $aPIVERSION, $companyId, $companyCustomId, $enable)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proListGetAsyncWithHttpInfo
     *
     * Get pros' list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId Immodvisor company ID (company or brand) (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID (company or brand). (optional)
     * @param  bool $enable If &#x27;true&#x27;, only get activated pros in the activated companies too. &#x27;true&#x27; by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proListGetAsyncWithHttpInfo($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null, $enable = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2007';
        $request = $this->proListGetRequest($checksum, $aPIVERSION, $companyId, $companyCustomId, $enable);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proListGet'
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId Immodvisor company ID (company or brand) (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID (company or brand). (optional)
     * @param  bool $enable If &#x27;true&#x27;, only get activated pros in the activated companies too. &#x27;true&#x27; by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proListGetRequest($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null, $enable = null)
    {
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling proListGet'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling proListGet'
            );
        }

        $resourcePath = '/pro/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($companyId !== null) {
            $queryParams['company_id'] = ObjectSerializer::toQueryValue($companyId, null);
        }
        // query params
        if ($companyCustomId !== null) {
            $queryParams['company_custom_id'] = ObjectSerializer::toQueryValue($companyCustomId, null);
        }
        // query params
        if ($enable !== null) {
            $queryParams['enable'] = ObjectSerializer::toQueryValue($enable, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proUnlinkDelete
     *
     * separate a pro from a company
     *
     * @param  int $id Pro&#x27;s Immodvisor&#x27;s unique identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId Your unique pro&#x27;s identifier to dissociate. (optional)
     * @param  int $companyId unique Immodvisor company ID to be dissociated (optional)
     * @param  string $companyCustomId Your unique company&#x27;s identifier to dissociate. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2006
     */
    public function proUnlinkDelete($id, $checksum, $aPIVERSION, $customId = null, $companyId = null, $companyCustomId = null)
    {
        list($response) = $this->proUnlinkDeleteWithHttpInfo($id, $checksum, $aPIVERSION, $customId, $companyId, $companyCustomId);
        return $response;
    }

    /**
     * Operation proUnlinkDeleteWithHttpInfo
     *
     * separate a pro from a company
     *
     * @param  int $id Pro&#x27;s Immodvisor&#x27;s unique identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId Your unique pro&#x27;s identifier to dissociate. (optional)
     * @param  int $companyId unique Immodvisor company ID to be dissociated (optional)
     * @param  string $companyCustomId Your unique company&#x27;s identifier to dissociate. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function proUnlinkDeleteWithHttpInfo($id, $checksum, $aPIVERSION, $customId = null, $companyId = null, $companyCustomId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proUnlinkDeleteRequest($id, $checksum, $aPIVERSION, $customId, $companyId, $companyCustomId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proUnlinkDeleteAsync
     *
     * separate a pro from a company
     *
     * @param  int $id Pro&#x27;s Immodvisor&#x27;s unique identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId Your unique pro&#x27;s identifier to dissociate. (optional)
     * @param  int $companyId unique Immodvisor company ID to be dissociated (optional)
     * @param  string $companyCustomId Your unique company&#x27;s identifier to dissociate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proUnlinkDeleteAsync($id, $checksum, $aPIVERSION, $customId = null, $companyId = null, $companyCustomId = null)
    {
        return $this->proUnlinkDeleteAsyncWithHttpInfo($id, $checksum, $aPIVERSION, $customId, $companyId, $companyCustomId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proUnlinkDeleteAsyncWithHttpInfo
     *
     * separate a pro from a company
     *
     * @param  int $id Pro&#x27;s Immodvisor&#x27;s unique identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId Your unique pro&#x27;s identifier to dissociate. (optional)
     * @param  int $companyId unique Immodvisor company ID to be dissociated (optional)
     * @param  string $companyCustomId Your unique company&#x27;s identifier to dissociate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proUnlinkDeleteAsyncWithHttpInfo($id, $checksum, $aPIVERSION, $customId = null, $companyId = null, $companyCustomId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proUnlinkDeleteRequest($id, $checksum, $aPIVERSION, $customId, $companyId, $companyCustomId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proUnlinkDelete'
     *
     * @param  int $id Pro&#x27;s Immodvisor&#x27;s unique identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId Your unique pro&#x27;s identifier to dissociate. (optional)
     * @param  int $companyId unique Immodvisor company ID to be dissociated (optional)
     * @param  string $companyCustomId Your unique company&#x27;s identifier to dissociate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proUnlinkDeleteRequest($id, $checksum, $aPIVERSION, $customId = null, $companyId = null, $companyCustomId = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proUnlinkDelete'
            );
        }
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling proUnlinkDelete'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling proUnlinkDelete'
            );
        }

        $resourcePath = '/pro/unlink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($customId !== null) {
            $queryParams['custom_id'] = ObjectSerializer::toQueryValue($customId, null);
        }
        // query params
        if ($companyId !== null) {
            $queryParams['company_id'] = ObjectSerializer::toQueryValue($companyId, null);
        }
        // query params
        if ($companyCustomId !== null) {
            $queryParams['company_custom_id'] = ObjectSerializer::toQueryValue($companyCustomId, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proUpdatePut
     *
     * update pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  string $email email (optional)
     * @param  bool $enable enable (optional)
     * @param  string $firstname firstname (optional)
     * @param  string $lastname lastname (optional)
     * @param  string $job job (optional)
     * @param  string $phone phone (optional)
     * @param  string $mobile mobile (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $zipcode zipcode (optional)
     * @param  string $city city (optional)
     * @param  string $language language (optional)
     * @param  bool $aclAapp aclAapp (optional)
     * @param  bool $aclPro aclPro (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2006
     */
    public function proUpdatePut($aPIVERSION, $id = null, $customId = null, $email = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        list($response) = $this->proUpdatePutWithHttpInfo($aPIVERSION, $id, $customId, $email, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum);
        return $response;
    }

    /**
     * Operation proUpdatePutWithHttpInfo
     *
     * update pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $email (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function proUpdatePutWithHttpInfo($aPIVERSION, $id = null, $customId = null, $email = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proUpdatePutRequest($aPIVERSION, $id, $customId, $email, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proUpdatePutAsync
     *
     * update pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $email (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proUpdatePutAsync($aPIVERSION, $id = null, $customId = null, $email = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        return $this->proUpdatePutAsyncWithHttpInfo($aPIVERSION, $id, $customId, $email, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proUpdatePutAsyncWithHttpInfo
     *
     * update pro
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $email (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proUpdatePutAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $email = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2006';
        $request = $this->proUpdatePutRequest($aPIVERSION, $id, $customId, $email, $enable, $firstname, $lastname, $job, $phone, $mobile, $address, $address2, $zipcode, $city, $language, $aclAapp, $aclPro, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proUpdatePut'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $email (optional)
     * @param  bool $enable (optional)
     * @param  string $firstname (optional)
     * @param  string $lastname (optional)
     * @param  string $job (optional)
     * @param  string $phone (optional)
     * @param  string $mobile (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $zipcode (optional)
     * @param  string $city (optional)
     * @param  string $language (optional)
     * @param  bool $aclAapp (optional)
     * @param  bool $aclPro (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proUpdatePutRequest($aPIVERSION, $id = null, $customId = null, $email = null, $enable = null, $firstname = null, $lastname = null, $job = null, $phone = null, $mobile = null, $address = null, $address2 = null, $zipcode = null, $city = null, $language = null, $aclAapp = null, $aclPro = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling proUpdatePut'
            );
        }

        $resourcePath = '/pro/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($enable !== null) {
            $formParams['enable'] = ObjectSerializer::toFormValue($enable);
        }
        // form params
        if ($firstname !== null) {
            $formParams['firstname'] = ObjectSerializer::toFormValue($firstname);
        }
        // form params
        if ($lastname !== null) {
            $formParams['lastname'] = ObjectSerializer::toFormValue($lastname);
        }
        // form params
        if ($job !== null) {
            $formParams['job'] = ObjectSerializer::toFormValue($job);
        }
        // form params
        if ($phone !== null) {
            $formParams['phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($mobile !== null) {
            $formParams['mobile'] = ObjectSerializer::toFormValue($mobile);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = ObjectSerializer::toFormValue($address);
        }
        // form params
        if ($address2 !== null) {
            $formParams['address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($zipcode !== null) {
            $formParams['zipcode'] = ObjectSerializer::toFormValue($zipcode);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($language !== null) {
            $formParams['language'] = ObjectSerializer::toFormValue($language);
        }
        // form params
        if ($aclAapp !== null) {
            $formParams['acl_aapp'] = ObjectSerializer::toFormValue($aclAapp);
        }
        // form params
        if ($aclPro !== null) {
            $formParams['acl_pro'] = ObjectSerializer::toFormValue($aclPro);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
