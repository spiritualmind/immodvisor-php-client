<?php
/**
 * TeamApi
 * PHP version 5
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Immodvisor
 *
 * ## Terms of use The terms of use gather all the rules to follow to use the Immodvisor API. ## Technical side Your API key and the grains of salt of the checksums must remain secret, they represent your private parameters. It is strictly forbidden to communicate them to third parties. For security reasons, if one of these rules is not respected, we would be forced to deactivate your API key. ## Advices It is strongly recommended to use cache if you are using the API to display your rating and reviews on your site. This will ensure that the display of your page does not depend on the API responses and therefore does not affect its display time. ## Display the notices on your media ### On your website: You must clearly display the source of the reviews, namely Immodvisor. Thus, the Immodvisor logo or the seal of trust must clearly appear on the page displaying the reviews, with a link in the href, scanned by search engines, and pointing to the company file of the Immodvisor site. This point is essential for search engines to make the link between the 2 pages, and avoid duplication of content. The review pages of your site must be validated by our marketing department before going into production. You must also display a textual mention indicating that the reviews come from the Immodvisor site.   Our marketing department can be reached at 09 81 10 75 88 or by email at assistance@Immodvisor.com ### On other communication supports: You must always display the Immodvisor logo and indicate that the reviews are from the Immodvisor solution.  ## Display Rich Snippets in google results on your url Rich Snippets give the promise to the internet user to be able to read reviews. Any page displaying Rich Snippets in google must display the stars, as well as a link to the company's Immodvisor page. All these elements must match. For example, you can display the Rich Snippets of the company on the home page, and the Rich Snippets of each agency on your respective agency pages. Strong recommendation: a given Rich Snippet should only be placed on one and only one web page. Good to know: Rich Snippets tell Google's search engine a rating related to a web page. Google decides whether or not displaying the note in its search results is relevant to your web page. Immodvisor cannot influence Google's willingness to display or not the indicators sent by your site. ## Checksum For each call to the API, a checksum must be sent. This checksum is calculated as follows:   Concatenation of the following values, all formatted in SHA1 :  * apikey * values of the sent fields, formatted in JSON if it is an array or an object * checksum_salt_in  ### PHP code example ```PHP private function calcChecksumIn($api_key, $checksum_salt_in, $datas = array())     {         $checksum = \"\";         $checksum .= $api_key;         foreach ($datas as $k => $v) {             if (is_array($v) || is_object($v)) {                 $v = json_encode($v, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);             } elseif ($v === true) {                 $v = 1;             } elseif ($v === false) {                 $v = 0;             }             $checksum .= $v;         }         $checksum .= $checksum_salt_in;         return sha1($checksum);     }   ```
 *
 * OpenAPI spec version: 1.11.0
 * Contact: assistance@Immodvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Immodvisor\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Immodvisor\ApiException;
use Immodvisor\Configuration;
use Immodvisor\HeaderSelector;
use Immodvisor\ObjectSerializer;

/**
 * TeamApi Class Doc Comment
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation teamCreatePost
     *
     * create team for company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId companyId (optional)
     * @param  string $companyCustomId companyCustomId (optional)
     * @param  string $name name (optional)
     * @param  string $customId customId (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse20015
     */
    public function teamCreatePost($aPIVERSION, $companyId = null, $companyCustomId = null, $name = null, $customId = null, $checksum = null)
    {
        list($response) = $this->teamCreatePostWithHttpInfo($aPIVERSION, $companyId, $companyCustomId, $name, $customId, $checksum);
        return $response;
    }

    /**
     * Operation teamCreatePostWithHttpInfo
     *
     * create team for company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamCreatePostWithHttpInfo($aPIVERSION, $companyId = null, $companyCustomId = null, $name = null, $customId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20015';
        $request = $this->teamCreatePostRequest($aPIVERSION, $companyId, $companyCustomId, $name, $customId, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamCreatePostAsync
     *
     * create team for company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamCreatePostAsync($aPIVERSION, $companyId = null, $companyCustomId = null, $name = null, $customId = null, $checksum = null)
    {
        return $this->teamCreatePostAsyncWithHttpInfo($aPIVERSION, $companyId, $companyCustomId, $name, $customId, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamCreatePostAsyncWithHttpInfo
     *
     * create team for company
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamCreatePostAsyncWithHttpInfo($aPIVERSION, $companyId = null, $companyCustomId = null, $name = null, $customId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20015';
        $request = $this->teamCreatePostRequest($aPIVERSION, $companyId, $companyCustomId, $name, $customId, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamCreatePost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId (optional)
     * @param  string $companyCustomId (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamCreatePostRequest($aPIVERSION, $companyId = null, $companyCustomId = null, $name = null, $customId = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling teamCreatePost'
            );
        }

        $resourcePath = '/team/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($companyId !== null) {
            $formParams['company_id'] = ObjectSerializer::toFormValue($companyId);
        }
        // form params
        if ($companyCustomId !== null) {
            $formParams['company_custom_id'] = ObjectSerializer::toFormValue($companyCustomId);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamDeleteDelete
     *
     * delete team
     *
     * @param  int $id Team&#x27;s ID to delete. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function teamDeleteDelete($id, $checksum, $aPIVERSION)
    {
        list($response) = $this->teamDeleteDeleteWithHttpInfo($id, $checksum, $aPIVERSION);
        return $response;
    }

    /**
     * Operation teamDeleteDeleteWithHttpInfo
     *
     * delete team
     *
     * @param  int $id Team&#x27;s ID to delete. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamDeleteDeleteWithHttpInfo($id, $checksum, $aPIVERSION)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->teamDeleteDeleteRequest($id, $checksum, $aPIVERSION);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamDeleteDeleteAsync
     *
     * delete team
     *
     * @param  int $id Team&#x27;s ID to delete. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamDeleteDeleteAsync($id, $checksum, $aPIVERSION)
    {
        return $this->teamDeleteDeleteAsyncWithHttpInfo($id, $checksum, $aPIVERSION)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamDeleteDeleteAsyncWithHttpInfo
     *
     * delete team
     *
     * @param  int $id Team&#x27;s ID to delete. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamDeleteDeleteAsyncWithHttpInfo($id, $checksum, $aPIVERSION)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->teamDeleteDeleteRequest($id, $checksum, $aPIVERSION);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamDeleteDelete'
     *
     * @param  int $id Team&#x27;s ID to delete. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamDeleteDeleteRequest($id, $checksum, $aPIVERSION)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling teamDeleteDelete'
            );
        }
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling teamDeleteDelete'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling teamDeleteDelete'
            );
        }

        $resourcePath = '/team/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamGetGet
     *
     * get team's informations
     *
     * @param  int $id team Immodvisor login (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse20015
     */
    public function teamGetGet($id, $checksum, $aPIVERSION)
    {
        list($response) = $this->teamGetGetWithHttpInfo($id, $checksum, $aPIVERSION);
        return $response;
    }

    /**
     * Operation teamGetGetWithHttpInfo
     *
     * get team's informations
     *
     * @param  int $id team Immodvisor login (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamGetGetWithHttpInfo($id, $checksum, $aPIVERSION)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20015';
        $request = $this->teamGetGetRequest($id, $checksum, $aPIVERSION);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamGetGetAsync
     *
     * get team's informations
     *
     * @param  int $id team Immodvisor login (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamGetGetAsync($id, $checksum, $aPIVERSION)
    {
        return $this->teamGetGetAsyncWithHttpInfo($id, $checksum, $aPIVERSION)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamGetGetAsyncWithHttpInfo
     *
     * get team's informations
     *
     * @param  int $id team Immodvisor login (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamGetGetAsyncWithHttpInfo($id, $checksum, $aPIVERSION)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20015';
        $request = $this->teamGetGetRequest($id, $checksum, $aPIVERSION);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamGetGet'
     *
     * @param  int $id team Immodvisor login (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamGetGetRequest($id, $checksum, $aPIVERSION)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling teamGetGet'
            );
        }
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling teamGetGet'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling teamGetGet'
            );
        }

        $resourcePath = '/team/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamListGet
     *
     * Get company's teams list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId unique Immodvisor company ID (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID. (unused if &#x27;company_id&#x27; is present) (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse20014
     */
    public function teamListGet($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null)
    {
        list($response) = $this->teamListGetWithHttpInfo($checksum, $aPIVERSION, $companyId, $companyCustomId);
        return $response;
    }

    /**
     * Operation teamListGetWithHttpInfo
     *
     * Get company's teams list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId unique Immodvisor company ID (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID. (unused if &#x27;company_id&#x27; is present) (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamListGetWithHttpInfo($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20014';
        $request = $this->teamListGetRequest($checksum, $aPIVERSION, $companyId, $companyCustomId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamListGetAsync
     *
     * Get company's teams list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId unique Immodvisor company ID (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID. (unused if &#x27;company_id&#x27; is present) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamListGetAsync($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null)
    {
        return $this->teamListGetAsyncWithHttpInfo($checksum, $aPIVERSION, $companyId, $companyCustomId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamListGetAsyncWithHttpInfo
     *
     * Get company's teams list
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId unique Immodvisor company ID (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID. (unused if &#x27;company_id&#x27; is present) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamListGetAsyncWithHttpInfo($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20014';
        $request = $this->teamListGetRequest($checksum, $aPIVERSION, $companyId, $companyCustomId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamListGet'
     *
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $companyId unique Immodvisor company ID (optional)
     * @param  string $companyCustomId Your unique company&#x27;s ID. (unused if &#x27;company_id&#x27; is present) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamListGetRequest($checksum, $aPIVERSION, $companyId = null, $companyCustomId = null)
    {
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling teamListGet'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling teamListGet'
            );
        }

        $resourcePath = '/team/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($companyId !== null) {
            $queryParams['company_id'] = ObjectSerializer::toQueryValue($companyId, null);
        }
        // query params
        if ($companyCustomId !== null) {
            $queryParams['company_custom_id'] = ObjectSerializer::toQueryValue($companyCustomId, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamProlinkPost
     *
     * Associate a pro to a team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $customId customId (optional)
     * @param  string $proId proId (optional)
     * @param  string $proCustomId proCustomId (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function teamProlinkPost($aPIVERSION, $id = null, $customId = null, $proId = null, $proCustomId = null, $checksum = null)
    {
        list($response) = $this->teamProlinkPostWithHttpInfo($aPIVERSION, $id, $customId, $proId, $proCustomId, $checksum);
        return $response;
    }

    /**
     * Operation teamProlinkPostWithHttpInfo
     *
     * Associate a pro to a team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $proId (optional)
     * @param  string $proCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamProlinkPostWithHttpInfo($aPIVERSION, $id = null, $customId = null, $proId = null, $proCustomId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->teamProlinkPostRequest($aPIVERSION, $id, $customId, $proId, $proCustomId, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamProlinkPostAsync
     *
     * Associate a pro to a team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $proId (optional)
     * @param  string $proCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamProlinkPostAsync($aPIVERSION, $id = null, $customId = null, $proId = null, $proCustomId = null, $checksum = null)
    {
        return $this->teamProlinkPostAsyncWithHttpInfo($aPIVERSION, $id, $customId, $proId, $proCustomId, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamProlinkPostAsyncWithHttpInfo
     *
     * Associate a pro to a team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $proId (optional)
     * @param  string $proCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamProlinkPostAsyncWithHttpInfo($aPIVERSION, $id = null, $customId = null, $proId = null, $proCustomId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->teamProlinkPostRequest($aPIVERSION, $id, $customId, $proId, $proCustomId, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamProlinkPost'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $customId (optional)
     * @param  string $proId (optional)
     * @param  string $proCustomId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamProlinkPostRequest($aPIVERSION, $id = null, $customId = null, $proId = null, $proCustomId = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling teamProlinkPost'
            );
        }

        $resourcePath = '/team/prolink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($proId !== null) {
            $formParams['pro_id'] = ObjectSerializer::toFormValue($proId);
        }
        // form params
        if ($proCustomId !== null) {
            $formParams['pro_custom_id'] = ObjectSerializer::toFormValue($proCustomId);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamProunlinkDelete
     *
     * Dissociate a pro from a team.
     *
     * @param  int $id team Immodvisor login (required)
     * @param  int $proId Pro&#x27;s identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your team ID (optional)
     * @param  string $proCustomId Your unique pro&#x27;s identifier to dissociate. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse2004
     */
    public function teamProunlinkDelete($id, $proId, $checksum, $aPIVERSION, $customId = null, $proCustomId = null)
    {
        list($response) = $this->teamProunlinkDeleteWithHttpInfo($id, $proId, $checksum, $aPIVERSION, $customId, $proCustomId);
        return $response;
    }

    /**
     * Operation teamProunlinkDeleteWithHttpInfo
     *
     * Dissociate a pro from a team.
     *
     * @param  int $id team Immodvisor login (required)
     * @param  int $proId Pro&#x27;s identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your team ID (optional)
     * @param  string $proCustomId Your unique pro&#x27;s identifier to dissociate. (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamProunlinkDeleteWithHttpInfo($id, $proId, $checksum, $aPIVERSION, $customId = null, $proCustomId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->teamProunlinkDeleteRequest($id, $proId, $checksum, $aPIVERSION, $customId, $proCustomId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamProunlinkDeleteAsync
     *
     * Dissociate a pro from a team.
     *
     * @param  int $id team Immodvisor login (required)
     * @param  int $proId Pro&#x27;s identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your team ID (optional)
     * @param  string $proCustomId Your unique pro&#x27;s identifier to dissociate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamProunlinkDeleteAsync($id, $proId, $checksum, $aPIVERSION, $customId = null, $proCustomId = null)
    {
        return $this->teamProunlinkDeleteAsyncWithHttpInfo($id, $proId, $checksum, $aPIVERSION, $customId, $proCustomId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamProunlinkDeleteAsyncWithHttpInfo
     *
     * Dissociate a pro from a team.
     *
     * @param  int $id team Immodvisor login (required)
     * @param  int $proId Pro&#x27;s identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your team ID (optional)
     * @param  string $proCustomId Your unique pro&#x27;s identifier to dissociate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamProunlinkDeleteAsyncWithHttpInfo($id, $proId, $checksum, $aPIVERSION, $customId = null, $proCustomId = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse2004';
        $request = $this->teamProunlinkDeleteRequest($id, $proId, $checksum, $aPIVERSION, $customId, $proCustomId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamProunlinkDelete'
     *
     * @param  int $id team Immodvisor login (required)
     * @param  int $proId Pro&#x27;s identifier to dissociate. (required)
     * @param  string $checksum Request&#x27;s validity checksum (required)
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  string $customId your team ID (optional)
     * @param  string $proCustomId Your unique pro&#x27;s identifier to dissociate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamProunlinkDeleteRequest($id, $proId, $checksum, $aPIVERSION, $customId = null, $proCustomId = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling teamProunlinkDelete'
            );
        }
        // verify the required parameter 'proId' is set
        if ($proId === null || (is_array($proId) && count($proId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proId when calling teamProunlinkDelete'
            );
        }
        // verify the required parameter 'checksum' is set
        if ($checksum === null || (is_array($checksum) && count($checksum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checksum when calling teamProunlinkDelete'
            );
        }
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling teamProunlinkDelete'
            );
        }

        $resourcePath = '/team/prounlink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($customId !== null) {
            $queryParams['custom_id'] = ObjectSerializer::toQueryValue($customId, null);
        }
        // query params
        if ($proId !== null) {
            $queryParams['pro_id'] = ObjectSerializer::toQueryValue($proId, null);
        }
        // query params
        if ($proCustomId !== null) {
            $queryParams['pro_custom_id'] = ObjectSerializer::toQueryValue($proCustomId, null);
        }
        // query params
        if ($checksum !== null) {
            $queryParams['checksum'] = ObjectSerializer::toQueryValue($checksum, null);
        }
        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamUpdatePut
     *
     * update team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id id (optional)
     * @param  string $name name (optional)
     * @param  string $customId customId (optional)
     * @param  string $checksum checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Immodvisor\Model\InlineResponse20015
     */
    public function teamUpdatePut($aPIVERSION, $id = null, $name = null, $customId = null, $checksum = null)
    {
        list($response) = $this->teamUpdatePutWithHttpInfo($aPIVERSION, $id, $name, $customId, $checksum);
        return $response;
    }

    /**
     * Operation teamUpdatePutWithHttpInfo
     *
     * update team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \Immodvisor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Immodvisor\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamUpdatePutWithHttpInfo($aPIVERSION, $id = null, $name = null, $customId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20015';
        $request = $this->teamUpdatePutRequest($aPIVERSION, $id, $name, $customId, $checksum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Immodvisor\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation teamUpdatePutAsync
     *
     * update team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamUpdatePutAsync($aPIVERSION, $id = null, $name = null, $customId = null, $checksum = null)
    {
        return $this->teamUpdatePutAsyncWithHttpInfo($aPIVERSION, $id, $name, $customId, $checksum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamUpdatePutAsyncWithHttpInfo
     *
     * update team
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function teamUpdatePutAsyncWithHttpInfo($aPIVERSION, $id = null, $name = null, $customId = null, $checksum = null)
    {
        $returnType = '\Immodvisor\Model\InlineResponse20015';
        $request = $this->teamUpdatePutRequest($aPIVERSION, $id, $name, $customId, $checksum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamUpdatePut'
     *
     * @param  string $aPIVERSION API&#x27;s Used version. (required)
     * @param  int $id (optional)
     * @param  string $name (optional)
     * @param  string $customId (optional)
     * @param  string $checksum (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function teamUpdatePutRequest($aPIVERSION, $id = null, $name = null, $customId = null, $checksum = null)
    {
        // verify the required parameter 'aPIVERSION' is set
        if ($aPIVERSION === null || (is_array($aPIVERSION) && count($aPIVERSION) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aPIVERSION when calling teamUpdatePut'
            );
        }

        $resourcePath = '/team/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($aPIVERSION !== null) {
            $headerParams['APIVERSION'] = ObjectSerializer::toHeaderValue($aPIVERSION);
        }


        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($customId !== null) {
            $formParams['custom_id'] = ObjectSerializer::toFormValue($customId);
        }
        // form params
        if ($checksum !== null) {
            $formParams['checksum'] = ObjectSerializer::toFormValue($checksum);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('APIKEY');
        if ($apiKey !== null) {
            $headers['APIKEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
