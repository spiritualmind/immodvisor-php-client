<?php
/**
 * Company
 *
 * PHP version 5
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Immodvisor
 *
 * ## Terms of use    \\n\\nThe terms of use gather all the rules to follow to use the Immodvisor API. ## Technical side Your API key and the grains of salt of the checksums must remain secret, they represent your private parameters. It is strictly forbidden to communicate them to third parties. For security reasons, if one of these rules is not respected, we would be forced to deactivate your API key. ## Advices It is strongly recommended to use cache if you are using the API to display your rating and reviews on your site. This will ensure that the display of your page does not depend on the API responses and therefore does not affect its display time. ## Display the notices on your media ### On your website: You must clearly display the source of the reviews, namely Immodvisor. Thus, the Immodvisor logo or the seal of trust must clearly appear on the page displaying the reviews, with a link in the href, scanned by search engines, and pointing to the company file of the Immodvisor site. This point is essential for search engines to make the link between the 2 pages, and avoid duplication of content. The review pages of your site must be validated by our marketing department before going into production. You must also display a textual mention indicating that the reviews come from the Immodvisor site.   Our marketing department can be reached at 09 81 10 75 88 or by email at assistance@Immodvisor.com ### On other communication supports: You must always display the Immodvisor logo and indicate that the reviews are from the Immodvisor solution.  ## Display Rich Snippets in google results on your url Rich Snippets give the promise to the internet user to be able to read reviews. Any page displaying Rich Snippets in google must display the stars, as well as a link to the company's Immodvisor page. All these elements must match. For example, you can display the Rich Snippets of the company on the home page, and the Rich Snippets of each agency on your respective agency pages. Strong recommendation: a given Rich Snippet should only be placed on one and only one web page. Good to know: Rich Snippets tell Google's search engine a rating related to a web page. Google decides whether or not displaying the note in its search results is relevant to your web page. Immodvisor cannot influence Google's willingness to display or not the indicators sent by your site. ## Checksum For each call to the API, a checksum must be sent. This checksum is calculated as follows:   Concatenation of the following values, all formatted in SHA1 :  * apikey * values of the sent fields, formatted in JSON if it is an array or an object * checksum_salt_in  ### PHP code example ```PHP private function calcChecksumIn($api_key, $checksum_salt_in, $datas = array())     {         $checksum = \"\";         $checksum .= $api_key;         foreach ($datas as $k => $v) {             if (is_array($v) || is_object($v)) {                 $v = json_encode($v, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);             } elseif ($v === true) {                 $v = 1;             } elseif ($v === false) {                 $v = 0;             }             $checksum .= $v;         }         $checksum .= $checksum_salt_in;         return sha1($checksum);     }   ```
 *
 * OpenAPI spec version: 1.11.0
 * Contact: assistance@Immodvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Immodvisor\Model;

use \ArrayAccess;
use \Immodvisor\ObjectSerializer;

/**
 * Company Class Doc Comment
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Company implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'customId' => 'string',
        'type' => 'string',
        'url' => 'string',
        'enable' => 'bool',
        'visible' => 'bool',
        'name' => 'string',
        'rsac' => 'string',
        'siret' => 'string',
        'rating' => 'float',
        'activities' => 'int[]',
        'reviews' => '\Immodvisor\Model\CompanyReviews',
        'address' => '\Immodvisor\Model\Address',
        'contact' => '\Immodvisor\Model\Contact',
        'widget' => '\Immodvisor\Model\Widget',
        'content' => 'string',
        'presenceManagement' => 'bool',
        'serviceArea' => '\Immodvisor\Model\ServiceArea[]',
        'googleDescription' => 'string',
        'shortDescription' => 'string',
        'longDescription' => 'string',
        'googleAttributes' => '\Immodvisor\Model\GoogleAttribute[]',
        'openingTime' => '\Immodvisor\Model\CompanycreateOpeningTime',
        'services' => '\Immodvisor\Model\Service[]',
        'facebookPage' => 'string',
        'twitterPage' => 'string',
        'website' => 'string',
        'logo' => 'string',
        'color' => 'string',
        'background' => 'string',
        'medias' => '\Immodvisor\Model\Media[]',
        'partners' => '\Immodvisor\Model\Partner[]',
        'immodvisorPartners' => '\Immodvisor\Model\ImmodvisorPartner[]',
        'richsnippet' => 'string',
        'ratingGoogle' => 'float',
        'nbrReviewsGoogle' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'customId' => null,
        'type' => null,
        'url' => null,
        'enable' => null,
        'visible' => null,
        'name' => null,
        'rsac' => null,
        'siret' => null,
        'rating' => null,
        'activities' => null,
        'reviews' => null,
        'address' => null,
        'contact' => null,
        'widget' => null,
        'content' => null,
        'presenceManagement' => null,
        'serviceArea' => null,
        'googleDescription' => null,
        'shortDescription' => null,
        'longDescription' => null,
        'googleAttributes' => null,
        'openingTime' => null,
        'services' => null,
        'facebookPage' => null,
        'twitterPage' => null,
        'website' => null,
        'logo' => null,
        'color' => null,
        'background' => null,
        'medias' => null,
        'partners' => null,
        'immodvisorPartners' => null,
        'richsnippet' => null,
        'ratingGoogle' => null,
        'nbrReviewsGoogle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customId' => 'custom_id',
        'type' => 'type',
        'url' => 'url',
        'enable' => 'enable',
        'visible' => 'visible',
        'name' => 'name',
        'rsac' => 'rsac',
        'siret' => 'siret',
        'rating' => 'rating',
        'activities' => 'activities',
        'reviews' => 'reviews',
        'address' => 'address',
        'contact' => 'contact',
        'widget' => 'widget',
        'content' => 'content',
        'presenceManagement' => 'presence_management',
        'serviceArea' => 'service_area',
        'googleDescription' => 'google_description',
        'shortDescription' => 'short_description',
        'longDescription' => 'long_description',
        'googleAttributes' => 'google_attributes',
        'openingTime' => 'opening_time',
        'services' => 'services',
        'facebookPage' => 'facebook_page',
        'twitterPage' => 'twitter_page',
        'website' => 'website',
        'logo' => 'logo',
        'color' => 'color',
        'background' => 'background',
        'medias' => 'medias',
        'partners' => 'partners',
        'immodvisorPartners' => 'Immodvisor_partners',
        'richsnippet' => 'richsnippet',
        'ratingGoogle' => 'rating_google',
        'nbrReviewsGoogle' => 'nbr_reviews_google'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customId' => 'setCustomId',
        'type' => 'setType',
        'url' => 'setUrl',
        'enable' => 'setEnable',
        'visible' => 'setVisible',
        'name' => 'setName',
        'rsac' => 'setRsac',
        'siret' => 'setSiret',
        'rating' => 'setRating',
        'activities' => 'setActivities',
        'reviews' => 'setReviews',
        'address' => 'setAddress',
        'contact' => 'setContact',
        'widget' => 'setWidget',
        'content' => 'setContent',
        'presenceManagement' => 'setPresenceManagement',
        'serviceArea' => 'setServiceArea',
        'googleDescription' => 'setGoogleDescription',
        'shortDescription' => 'setShortDescription',
        'longDescription' => 'setLongDescription',
        'googleAttributes' => 'setGoogleAttributes',
        'openingTime' => 'setOpeningTime',
        'services' => 'setServices',
        'facebookPage' => 'setFacebookPage',
        'twitterPage' => 'setTwitterPage',
        'website' => 'setWebsite',
        'logo' => 'setLogo',
        'color' => 'setColor',
        'background' => 'setBackground',
        'medias' => 'setMedias',
        'partners' => 'setPartners',
        'immodvisorPartners' => 'setImmodvisorPartners',
        'richsnippet' => 'setRichsnippet',
        'ratingGoogle' => 'setRatingGoogle',
        'nbrReviewsGoogle' => 'setNbrReviewsGoogle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customId' => 'getCustomId',
        'type' => 'getType',
        'url' => 'getUrl',
        'enable' => 'getEnable',
        'visible' => 'getVisible',
        'name' => 'getName',
        'rsac' => 'getRsac',
        'siret' => 'getSiret',
        'rating' => 'getRating',
        'activities' => 'getActivities',
        'reviews' => 'getReviews',
        'address' => 'getAddress',
        'contact' => 'getContact',
        'widget' => 'getWidget',
        'content' => 'getContent',
        'presenceManagement' => 'getPresenceManagement',
        'serviceArea' => 'getServiceArea',
        'googleDescription' => 'getGoogleDescription',
        'shortDescription' => 'getShortDescription',
        'longDescription' => 'getLongDescription',
        'googleAttributes' => 'getGoogleAttributes',
        'openingTime' => 'getOpeningTime',
        'services' => 'getServices',
        'facebookPage' => 'getFacebookPage',
        'twitterPage' => 'getTwitterPage',
        'website' => 'getWebsite',
        'logo' => 'getLogo',
        'color' => 'getColor',
        'background' => 'getBackground',
        'medias' => 'getMedias',
        'partners' => 'getPartners',
        'immodvisorPartners' => 'getImmodvisorPartners',
        'richsnippet' => 'getRichsnippet',
        'ratingGoogle' => 'getRatingGoogle',
        'nbrReviewsGoogle' => 'getNbrReviewsGoogle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customId'] = isset($data['customId']) ? $data['customId'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['rsac'] = isset($data['rsac']) ? $data['rsac'] : null;
        $this->container['siret'] = isset($data['siret']) ? $data['siret'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['activities'] = isset($data['activities']) ? $data['activities'] : null;
        $this->container['reviews'] = isset($data['reviews']) ? $data['reviews'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['widget'] = isset($data['widget']) ? $data['widget'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['presenceManagement'] = isset($data['presenceManagement']) ? $data['presenceManagement'] : null;
        $this->container['serviceArea'] = isset($data['serviceArea']) ? $data['serviceArea'] : null;
        $this->container['googleDescription'] = isset($data['googleDescription']) ? $data['googleDescription'] : null;
        $this->container['shortDescription'] = isset($data['shortDescription']) ? $data['shortDescription'] : null;
        $this->container['longDescription'] = isset($data['longDescription']) ? $data['longDescription'] : null;
        $this->container['googleAttributes'] = isset($data['googleAttributes']) ? $data['googleAttributes'] : null;
        $this->container['openingTime'] = isset($data['openingTime']) ? $data['openingTime'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['facebookPage'] = isset($data['facebookPage']) ? $data['facebookPage'] : null;
        $this->container['twitterPage'] = isset($data['twitterPage']) ? $data['twitterPage'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['background'] = isset($data['background']) ? $data['background'] : null;
        $this->container['medias'] = isset($data['medias']) ? $data['medias'] : null;
        $this->container['partners'] = isset($data['partners']) ? $data['partners'] : null;
        $this->container['immodvisorPartners'] = isset($data['immodvisorPartners']) ? $data['immodvisorPartners'] : null;
        $this->container['richsnippet'] = isset($data['richsnippet']) ? $data['richsnippet'] : null;
        $this->container['ratingGoogle'] = isset($data['ratingGoogle']) ? $data['ratingGoogle'] : null;
        $this->container['nbrReviewsGoogle'] = isset($data['nbrReviewsGoogle']) ? $data['nbrReviewsGoogle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Immodvisor's company's unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customId
     *
     * @return string
     */
    public function getCustomId()
    {
        return $this->container['customId'];
    }

    /**
     * Sets customId
     *
     * @param string $customId your's unique identifier
     *
     * @return $this
     */
    public function setCustomId($customId)
    {
        $this->container['customId'] = $customId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type brand or company
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Company's file absolute url on immodvisor.com
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool $enable Company enable
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible If public record is visible
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name company's name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rsac
     *
     * @return string
     */
    public function getRsac()
    {
        return $this->container['rsac'];
    }

    /**
     * Sets rsac
     *
     * @param string $rsac Company's RSAC
     *
     * @return $this
     */
    public function setRsac($rsac)
    {
        $this->container['rsac'] = $rsac;

        return $this;
    }

    /**
     * Gets siret
     *
     * @return string
     */
    public function getSiret()
    {
        return $this->container['siret'];
    }

    /**
     * Sets siret
     *
     * @param string $siret Company's SIRET
     *
     * @return $this
     */
    public function setSiret($siret)
    {
        $this->container['siret'] = $siret;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return float
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param float $rating score out of 5, empty if no opinion
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return int[]
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param int[] $activities Company's activities list
     *
     * @return $this
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets reviews
     *
     * @return \Immodvisor\Model\CompanyReviews
     */
    public function getReviews()
    {
        return $this->container['reviews'];
    }

    /**
     * Sets reviews
     *
     * @param \Immodvisor\Model\CompanyReviews $reviews reviews
     *
     * @return $this
     */
    public function setReviews($reviews)
    {
        $this->container['reviews'] = $reviews;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Immodvisor\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Immodvisor\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Immodvisor\Model\Contact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Immodvisor\Model\Contact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets widget
     *
     * @return \Immodvisor\Model\Widget
     */
    public function getWidget()
    {
        return $this->container['widget'];
    }

    /**
     * Sets widget
     *
     * @param \Immodvisor\Model\Widget $widget widget
     *
     * @return $this
     */
    public function setWidget($widget)
    {
        $this->container['widget'] = $widget;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content Company's description on immodvisor.com (HTML format)
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets presenceManagement
     *
     * @return bool
     */
    public function getPresenceManagement()
    {
        return $this->container['presenceManagement'];
    }

    /**
     * Sets presenceManagement
     *
     * @param bool $presenceManagement Presence management's enable
     *
     * @return $this
     */
    public function setPresenceManagement($presenceManagement)
    {
        $this->container['presenceManagement'] = $presenceManagement;

        return $this;
    }

    /**
     * Gets serviceArea
     *
     * @return \Immodvisor\Model\ServiceArea[]
     */
    public function getServiceArea()
    {
        return $this->container['serviceArea'];
    }

    /**
     * Sets serviceArea
     *
     * @param \Immodvisor\Model\ServiceArea[] $serviceArea Company's intervention area
     *
     * @return $this
     */
    public function setServiceArea($serviceArea)
    {
        $this->container['serviceArea'] = $serviceArea;

        return $this;
    }

    /**
     * Gets googleDescription
     *
     * @return string
     */
    public function getGoogleDescription()
    {
        return $this->container['googleDescription'];
    }

    /**
     * Sets googleDescription
     *
     * @param string $googleDescription Google My Business' description
     *
     * @return $this
     */
    public function setGoogleDescription($googleDescription)
    {
        $this->container['googleDescription'] = $googleDescription;

        return $this;
    }

    /**
     * Gets shortDescription
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['shortDescription'];
    }

    /**
     * Sets shortDescription
     *
     * @param string $shortDescription Presence management's short description
     *
     * @return $this
     */
    public function setShortDescription($shortDescription)
    {
        $this->container['shortDescription'] = $shortDescription;

        return $this;
    }

    /**
     * Gets longDescription
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['longDescription'];
    }

    /**
     * Sets longDescription
     *
     * @param string $longDescription Presence management's long description
     *
     * @return $this
     */
    public function setLongDescription($longDescription)
    {
        $this->container['longDescription'] = $longDescription;

        return $this;
    }

    /**
     * Gets googleAttributes
     *
     * @return \Immodvisor\Model\GoogleAttribute[]
     */
    public function getGoogleAttributes()
    {
        return $this->container['googleAttributes'];
    }

    /**
     * Sets googleAttributes
     *
     * @param \Immodvisor\Model\GoogleAttribute[] $googleAttributes googleAttributes
     *
     * @return $this
     */
    public function setGoogleAttributes($googleAttributes)
    {
        $this->container['googleAttributes'] = $googleAttributes;

        return $this;
    }

    /**
     * Gets openingTime
     *
     * @return \Immodvisor\Model\CompanycreateOpeningTime
     */
    public function getOpeningTime()
    {
        return $this->container['openingTime'];
    }

    /**
     * Sets openingTime
     *
     * @param \Immodvisor\Model\CompanycreateOpeningTime $openingTime openingTime
     *
     * @return $this
     */
    public function setOpeningTime($openingTime)
    {
        $this->container['openingTime'] = $openingTime;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Immodvisor\Model\Service[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Immodvisor\Model\Service[] $services Company's offered services list
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets facebookPage
     *
     * @return string
     */
    public function getFacebookPage()
    {
        return $this->container['facebookPage'];
    }

    /**
     * Sets facebookPage
     *
     * @param string $facebookPage Facebook's url page
     *
     * @return $this
     */
    public function setFacebookPage($facebookPage)
    {
        $this->container['facebookPage'] = $facebookPage;

        return $this;
    }

    /**
     * Gets twitterPage
     *
     * @return string
     */
    public function getTwitterPage()
    {
        return $this->container['twitterPage'];
    }

    /**
     * Sets twitterPage
     *
     * @param string $twitterPage Twitter's url page
     *
     * @return $this
     */
    public function setTwitterPage($twitterPage)
    {
        $this->container['twitterPage'] = $twitterPage;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website Company's website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo URL of the logo on Immodvisor.com
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color Window's color on immodvisor.com
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets background
     *
     * @return string
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string $background URL of the background image on Immodvisor.com
     *
     * @return $this
     */
    public function setBackground($background)
    {
        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets medias
     *
     * @return \Immodvisor\Model\Media[]
     */
    public function getMedias()
    {
        return $this->container['medias'];
    }

    /**
     * Sets medias
     *
     * @param \Immodvisor\Model\Media[] $medias list of media present on the Immodvisor.com showcase and on the portals
     *
     * @return $this
     */
    public function setMedias($medias)
    {
        $this->container['medias'] = $medias;

        return $this;
    }

    /**
     * Gets partners
     *
     * @return \Immodvisor\Model\Partner[]
     */
    public function getPartners()
    {
        return $this->container['partners'];
    }

    /**
     * Sets partners
     *
     * @param \Immodvisor\Model\Partner[] $partners Company's partners list
     *
     * @return $this
     */
    public function setPartners($partners)
    {
        $this->container['partners'] = $partners;

        return $this;
    }

    /**
     * Gets immodvisorPartners
     *
     * @return \Immodvisor\Model\ImmodvisorPartner[]
     */
    public function getImmodvisorPartners()
    {
        return $this->container['immodvisorPartners'];
    }

    /**
     * Sets immodvisorPartners
     *
     * @param \Immodvisor\Model\ImmodvisorPartner[] $immodvisorPartners list of the company's Immodvisor partners
     *
     * @return $this
     */
    public function setImmodvisorPartners($immodvisorPartners)
    {
        $this->container['immodvisorPartners'] = $immodvisorPartners;

        return $this;
    }

    /**
     * Gets richsnippet
     *
     * @return string
     */
    public function getRichsnippet()
    {
        return $this->container['richsnippet'];
    }

    /**
     * Sets richsnippet
     *
     * @param string $richsnippet code to be integrated on the company's page
     *
     * @return $this
     */
    public function setRichsnippet($richsnippet)
    {
        $this->container['richsnippet'] = $richsnippet;

        return $this;
    }

    /**
     * Gets ratingGoogle
     *
     * @return float
     */
    public function getRatingGoogle()
    {
        return $this->container['ratingGoogle'];
    }

    /**
     * Sets ratingGoogle
     *
     * @param float $ratingGoogle Google's overall rating of the company out of 5 (only for companies with the Gomybusiness product activated)
     *
     * @return $this
     */
    public function setRatingGoogle($ratingGoogle)
    {
        $this->container['ratingGoogle'] = $ratingGoogle;

        return $this;
    }

    /**
     * Gets nbrReviewsGoogle
     *
     * @return int
     */
    public function getNbrReviewsGoogle()
    {
        return $this->container['nbrReviewsGoogle'];
    }

    /**
     * Sets nbrReviewsGoogle
     *
     * @param int $nbrReviewsGoogle number of Google reviews (only for companies with the Gomybusiness product activated)
     *
     * @return $this
     */
    public function setNbrReviewsGoogle($nbrReviewsGoogle)
    {
        $this->container['nbrReviewsGoogle'] = $nbrReviewsGoogle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
