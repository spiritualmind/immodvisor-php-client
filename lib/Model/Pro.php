<?php
/**
 * Pro
 *
 * PHP version 5
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Immodvisor
 *
 * ## Terms of use The terms of use gather all the rules to follow to use the Immodvisor API. ## Technical side Your API key and the grains of salt of the checksums must remain secret, they represent your private parameters. It is strictly forbidden to communicate them to third parties. For security reasons, if one of these rules is not respected, we would be forced to deactivate your API key. ## Advices It is strongly recommended to use cache if you are using the API to display your rating and reviews on your site. This will ensure that the display of your page does not depend on the API responses and therefore does not affect its display time. ## Display the notices on your media ### On your website: You must clearly display the source of the reviews, namely Immodvisor. Thus, the Immodvisor logo or the seal of trust must clearly appear on the page displaying the reviews, with a link in the href, scanned by search engines, and pointing to the company file of the Immodvisor site. This point is essential for search engines to make the link between the 2 pages, and avoid duplication of content. The review pages of your site must be validated by our marketing department before going into production. You must also display a textual mention indicating that the reviews come from the Immodvisor site.   Our marketing department can be reached at 09 81 10 75 88 or by email at assistance@Immodvisor.com ### On other communication supports: You must always display the Immodvisor logo and indicate that the reviews are from the Immodvisor solution.  ## Display Rich Snippets in google results on your url Rich Snippets give the promise to the internet user to be able to read reviews. Any page displaying Rich Snippets in google must display the stars, as well as a link to the company's Immodvisor page. All these elements must match. For example, you can display the Rich Snippets of the company on the home page, and the Rich Snippets of each agency on your respective agency pages. Strong recommendation: a given Rich Snippet should only be placed on one and only one web page. Good to know: Rich Snippets tell Google's search engine a rating related to a web page. Google decides whether or not displaying the note in its search results is relevant to your web page. Immodvisor cannot influence Google's willingness to display or not the indicators sent by your site. ## Checksum For each call to the API, a checksum must be sent. This checksum is calculated as follows:   Concatenation of the following values, all formatted in SHA1 :  * apikey * values of the sent fields, formatted in JSON if it is an array or an object * checksum_salt_in  ### PHP code example ```PHP private function calcChecksumIn($api_key, $checksum_salt_in, $datas = array())     {         $checksum = \"\";         $checksum .= $api_key;         foreach ($datas as $k => $v) {             if (is_array($v) || is_object($v)) {                 $v = json_encode($v, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);             } elseif ($v === true) {                 $v = 1;             } elseif ($v === false) {                 $v = 0;             }             $checksum .= $v;         }         $checksum .= $checksum_salt_in;         return sha1($checksum);     }   ```
 *
 * OpenAPI spec version: 1.11.0
 * Contact: assistance@Immodvisor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Immodvisor\Model;

use \ArrayAccess;
use \Immodvisor\ObjectSerializer;

/**
 * Pro Class Doc Comment
 *
 * @category Class
 * @package  Immodvisor
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Pro implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'pro';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'customId' => 'string',
        'email' => 'string',
        'enable' => 'bool',
        'firstname' => 'string',
        'lastname' => 'string',
        'job' => 'string',
        'address' => '\Immodvisor\Model\ProAddress',
        'contact' => '\Immodvisor\Model\ProContact',
        'language' => 'string',
        'dateLastConnect' => 'string',
        'aappDateLastConnect' => 'string',
        'dateLastUpdatePassword' => 'string',
        'dateCreate' => 'string',
        'createdBy' => 'string',
        'dateUpdate' => 'string',
        'acls' => '\Immodvisor\Model\ProAcls',
        'companies' => '\Immodvisor\Model\ProCompanies[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'customId' => null,
        'email' => null,
        'enable' => null,
        'firstname' => null,
        'lastname' => null,
        'job' => null,
        'address' => null,
        'contact' => null,
        'language' => null,
        'dateLastConnect' => null,
        'aappDateLastConnect' => null,
        'dateLastUpdatePassword' => null,
        'dateCreate' => null,
        'createdBy' => null,
        'dateUpdate' => null,
        'acls' => null,
        'companies' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customId' => 'custom_id',
        'email' => 'email',
        'enable' => 'enable',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'job' => 'job',
        'address' => 'address',
        'contact' => 'contact',
        'language' => 'language',
        'dateLastConnect' => 'date_last_connect',
        'aappDateLastConnect' => 'aapp_date_last_connect',
        'dateLastUpdatePassword' => 'date_last_update_password',
        'dateCreate' => 'date_create',
        'createdBy' => 'created_by',
        'dateUpdate' => 'date_update',
        'acls' => 'acls',
        'companies' => 'companies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customId' => 'setCustomId',
        'email' => 'setEmail',
        'enable' => 'setEnable',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'job' => 'setJob',
        'address' => 'setAddress',
        'contact' => 'setContact',
        'language' => 'setLanguage',
        'dateLastConnect' => 'setDateLastConnect',
        'aappDateLastConnect' => 'setAappDateLastConnect',
        'dateLastUpdatePassword' => 'setDateLastUpdatePassword',
        'dateCreate' => 'setDateCreate',
        'createdBy' => 'setCreatedBy',
        'dateUpdate' => 'setDateUpdate',
        'acls' => 'setAcls',
        'companies' => 'setCompanies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customId' => 'getCustomId',
        'email' => 'getEmail',
        'enable' => 'getEnable',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'job' => 'getJob',
        'address' => 'getAddress',
        'contact' => 'getContact',
        'language' => 'getLanguage',
        'dateLastConnect' => 'getDateLastConnect',
        'aappDateLastConnect' => 'getAappDateLastConnect',
        'dateLastUpdatePassword' => 'getDateLastUpdatePassword',
        'dateCreate' => 'getDateCreate',
        'createdBy' => 'getCreatedBy',
        'dateUpdate' => 'getDateUpdate',
        'acls' => 'getAcls',
        'companies' => 'getCompanies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customId'] = isset($data['customId']) ? $data['customId'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['job'] = isset($data['job']) ? $data['job'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['dateLastConnect'] = isset($data['dateLastConnect']) ? $data['dateLastConnect'] : null;
        $this->container['aappDateLastConnect'] = isset($data['aappDateLastConnect']) ? $data['aappDateLastConnect'] : null;
        $this->container['dateLastUpdatePassword'] = isset($data['dateLastUpdatePassword']) ? $data['dateLastUpdatePassword'] : null;
        $this->container['dateCreate'] = isset($data['dateCreate']) ? $data['dateCreate'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['dateUpdate'] = isset($data['dateUpdate']) ? $data['dateUpdate'] : null;
        $this->container['acls'] = isset($data['acls']) ? $data['acls'] : null;
        $this->container['companies'] = isset($data['companies']) ? $data['companies'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Pro's Immodvisor's unique ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customId
     *
     * @return string
     */
    public function getCustomId()
    {
        return $this->container['customId'];
    }

    /**
     * Sets customId
     *
     * @param string $customId your's unique identifier
     *
     * @return $this
     */
    public function setCustomId($customId)
    {
        $this->container['customId'] = $customId;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email e-mail pro, use for login
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool $enable pro's account activation status
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets job
     *
     * @return string
     */
    public function getJob()
    {
        return $this->container['job'];
    }

    /**
     * Sets job
     *
     * @param string $job job
     *
     * @return $this
     */
    public function setJob($job)
    {
        $this->container['job'] = $job;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Immodvisor\Model\ProAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Immodvisor\Model\ProAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Immodvisor\Model\ProContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Immodvisor\Model\ProContact $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language (ISO code 639-1)
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets dateLastConnect
     *
     * @return string
     */
    public function getDateLastConnect()
    {
        return $this->container['dateLastConnect'];
    }

    /**
     * Sets dateLastConnect
     *
     * @param string $dateLastConnect last login date
     *
     * @return $this
     */
    public function setDateLastConnect($dateLastConnect)
    {
        $this->container['dateLastConnect'] = $dateLastConnect;

        return $this;
    }

    /**
     * Gets aappDateLastConnect
     *
     * @return string
     */
    public function getAappDateLastConnect()
    {
        return $this->container['aappDateLastConnect'];
    }

    /**
     * Sets aappDateLastConnect
     *
     * @param string $aappDateLastConnect date of last login to the application
     *
     * @return $this
     */
    public function setAappDateLastConnect($aappDateLastConnect)
    {
        $this->container['aappDateLastConnect'] = $aappDateLastConnect;

        return $this;
    }

    /**
     * Gets dateLastUpdatePassword
     *
     * @return string
     */
    public function getDateLastUpdatePassword()
    {
        return $this->container['dateLastUpdatePassword'];
    }

    /**
     * Sets dateLastUpdatePassword
     *
     * @param string $dateLastUpdatePassword date of last password change
     *
     * @return $this
     */
    public function setDateLastUpdatePassword($dateLastUpdatePassword)
    {
        $this->container['dateLastUpdatePassword'] = $dateLastUpdatePassword;

        return $this;
    }

    /**
     * Gets dateCreate
     *
     * @return string
     */
    public function getDateCreate()
    {
        return $this->container['dateCreate'];
    }

    /**
     * Sets dateCreate
     *
     * @param string $dateCreate creation date
     *
     * @return $this
     */
    public function setDateCreate($dateCreate)
    {
        $this->container['dateCreate'] = $dateCreate;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string $createdBy place where the professional was created
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets dateUpdate
     *
     * @return string
     */
    public function getDateUpdate()
    {
        return $this->container['dateUpdate'];
    }

    /**
     * Sets dateUpdate
     *
     * @param string $dateUpdate modification date
     *
     * @return $this
     */
    public function setDateUpdate($dateUpdate)
    {
        $this->container['dateUpdate'] = $dateUpdate;

        return $this;
    }

    /**
     * Gets acls
     *
     * @return \Immodvisor\Model\ProAcls
     */
    public function getAcls()
    {
        return $this->container['acls'];
    }

    /**
     * Sets acls
     *
     * @param \Immodvisor\Model\ProAcls $acls acls
     *
     * @return $this
     */
    public function setAcls($acls)
    {
        $this->container['acls'] = $acls;

        return $this;
    }

    /**
     * Gets companies
     *
     * @return \Immodvisor\Model\ProCompanies[]
     */
    public function getCompanies()
    {
        return $this->container['companies'];
    }

    /**
     * Sets companies
     *
     * @param \Immodvisor\Model\ProCompanies[] $companies companies
     *
     * @return $this
     */
    public function setCompanies($companies)
    {
        $this->container['companies'] = $companies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
